{
  "pipelineSpec": {
    "components": {
      "comp-aggregate-clusters": {
        "executorLabel": "exec-aggregate-clusters",
        "inputDefinitions": {
          "parameters": {
            "model_name": {
              "type": "STRING"
            },
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_agg_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-automl-forecasting-training-job": {
        "executorLabel": "exec-automl-forecasting-training-job",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "data_granularity_count": {
              "type": "INT"
            },
            "data_granularity_unit": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "export_evaluated_data_items": {
              "type": "STRING"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "export_evaluated_data_items_override_destination": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_display_name": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "predefined_split_column_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "time_column": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "time_series_identifier_column": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-automl-forecasting-training-job-2": {
        "executorLabel": "exec-automl-forecasting-training-job-2",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "data_granularity_count": {
              "type": "INT"
            },
            "data_granularity_unit": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "export_evaluated_data_items": {
              "type": "STRING"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "export_evaluated_data_items_override_destination": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_display_name": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "predefined_split_column_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "time_column": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "time_series_identifier_column": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-bigquery-create-model-job": {
        "executorLabel": "exec-bigquery-create-model-job",
        "inputDefinitions": {
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-create-prediction-dataset-term-level": {
        "executorLabel": "exec-create-prediction-dataset-term-level",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table_uri": {
              "type": "STRING"
            },
            "subcat_id": {
              "type": "INT"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "training_data_table_uri": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-create-top-mover-table": {
        "executorLabel": "exec-create-top-mover-table",
        "inputDefinitions": {
          "artifacts": {
            "trained_model": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "predict_on_dt": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "six_month_dt": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "top_n_results": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_train_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-nlp-featurize-and-cluster": {
        "executorLabel": "exec-nlp-featurize-and-cluster",
        "inputDefinitions": {
          "parameters": {
            "model_name": {
              "type": "STRING"
            },
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "subcat_id": {
              "type": "INT"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-prep-forecast-term-level": {
        "executorLabel": "exec-prep-forecast-term-level",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_train_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-time-series-dataset-create": {
        "executorLabel": "exec-time-series-dataset-create",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-time-series-dataset-create-2": {
        "executorLabel": "exec-time-series-dataset-create-2",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-aggregate-clusters": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "aggregate_clusters"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef aggregate_clusters(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    model_name: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_agg_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    target_bq_table = 'bq://' + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n            with centroids as (select * from \n            (SELECT\n            centroid_id, feature, numerical_value\n            FROM\n              ML.CENTROIDS(MODEL `{model_name}`)\n            )\n            PIVOT(avg(numerical_value) for feature in ('comments_embed_p1',\n            'comments_embed_p2',\n            'comments_embed_p3',\n            'comments_embed_p4',\n            'comments_embed_p5',\n            'comments_embed_p6',\n            'comments_embed_p7',\n            'comments_embed_p8',\n            'comments_embed_p9',\n            'comments_embed_p10',\n            'comments_embed_p11',\n            'comments_embed_p12',\n            'comments_embed_p13',\n            'comments_embed_p14',\n            'comments_embed_p15',\n            'comments_embed_p16',\n            'comments_embed_p17',\n            'comments_embed_p18',\n            'comments_embed_p19',\n            'comments_embed_p20'))\n                              )\n            select volume, date, b.*,\n            case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                      when date between '{valid_st}' and '{valid_end}' then 'VALIDATE'\n                     else 'TEST' end as split_col\n            from (\n                select sum(volume) as volume, date, centroid_id \n                from {source_table} group by date, centroid_id\n            ) a\n            inner join centroids b on a.centroid_id = b.centroid_id\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_bq_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-automl-forecasting-training-job": {
          "container": {
            "args": [
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.target_column",
              "{{$.inputs.parameters['target_column']}}",
              "--method.time_column",
              "{{$.inputs.parameters['time_column']}}",
              "--method.time_series_identifier_column",
              "{{$.inputs.parameters['time_series_identifier_column']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.data_granularity_unit",
              "{{$.inputs.parameters['data_granularity_unit']}}",
              "--method.data_granularity_count",
              "{{$.inputs.parameters['data_granularity_count']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--init.optimization_objective",
              "{{$.inputs.parameters['optimization_objective']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--method.model_display_name",
              "{{$.inputs.parameters['model_display_name']}}",
              "--method.predefined_split_column_name",
              "{{$.inputs.parameters['predefined_split_column_name']}}",
              "--method.export_evaluated_data_items",
              "{{$.inputs.parameters['export_evaluated_data_items']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}",
              "--method.export_evaluated_data_items_override_destination",
              "{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--init.labels",
              "{{$.inputs.parameters['labels']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-automl-forecasting-training-job-2": {
          "container": {
            "args": [
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.target_column",
              "{{$.inputs.parameters['target_column']}}",
              "--method.time_column",
              "{{$.inputs.parameters['time_column']}}",
              "--method.time_series_identifier_column",
              "{{$.inputs.parameters['time_series_identifier_column']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.data_granularity_unit",
              "{{$.inputs.parameters['data_granularity_unit']}}",
              "--method.data_granularity_count",
              "{{$.inputs.parameters['data_granularity_count']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--init.optimization_objective",
              "{{$.inputs.parameters['optimization_objective']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--method.model_display_name",
              "{{$.inputs.parameters['model_display_name']}}",
              "--method.predefined_split_column_name",
              "{{$.inputs.parameters['predefined_split_column_name']}}",
              "--method.export_evaluated_data_items",
              "{{$.inputs.parameters['export_evaluated_data_items']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}",
              "--method.export_evaluated_data_items_override_destination",
              "{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--init.labels",
              "{{$.inputs.parameters['labels']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-bigquery-create-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryCreateModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query\": \"{{$.inputs.parameters['query']}}\", \"query_parameters\": {{$.inputs.parameters['query_parameters']}}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-create-prediction-dataset-term-level": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "create_prediction_dataset_term_level"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_prediction_dataset_term_level(\n      target_table: str,\n      source_table_uri: str,\n      train_st: str,\n      train_end: str,\n      valid_st: str,\n      valid_end: str,\n      subcat_id: int,\n      override: str = 'False',\n      project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('training_data_table_uri', str)]):\n\n    from google.cloud import bigquery\n\n    override = bool(override)\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n        RETURNS \n        STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n               p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n               p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n               p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n               p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n        AS (\n        STRUCT(\n            arr[OFFSET(0)]\n            , arr[OFFSET(1)]\n            , arr[OFFSET(2)]\n            , arr[OFFSET(3)]\n            , arr[OFFSET(4)]\n            , arr[OFFSET(5)]\n            , arr[OFFSET(6)]\n            , arr[OFFSET(7)]\n            , arr[OFFSET(8)]\n            , arr[OFFSET(9)]\n            , arr[OFFSET(10)]\n            , arr[OFFSET(11)]\n            , arr[OFFSET(12)]\n            , arr[OFFSET(13)]\n            , arr[OFFSET(14)]\n            , arr[OFFSET(15)]\n            , arr[OFFSET(16)]\n            , arr[OFFSET(17)]\n            , arr[OFFSET(18)]\n            , arr[OFFSET(19)]    \n        ));\n\n\n        CREATE OR REPLACE TABLE `{target_table}` as (\n            SELECT * except(output_0), case when date between \"{train_st}\" and \"{train_end}\" then 'TRAIN'\n                  when date between \"{valid_st}\" and \"{valid_end}\" then 'VALIDATE'\n                 else 'TEST' end as split_col,\n            arr_to_input_20(output_0) as embed\n        FROM ML.PREDICT(MODEL trendspotting.swivel_text_embed,\n        (\n          SELECT date, geo_id, term AS sentences, category_rank, concat( term, geo_id) as series_id\n          FROM `{source_table_uri}` where category_id = {subcat_id} and date > \"{train_st}\"\n        ))      \n        )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-create-top-mover-table": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "create_top_mover_table"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_top_mover_table(\n    source_table: str,\n    target_table: str,\n    predict_on_dt: str, #uses the last validation date,\n    six_month_dt: str,\n    trained_model: Input[Artifact],\n    top_n_results: int,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_train_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE {target_table} as (\n    select * from\n      (with six_mo_val as (select *, predicted_category_rank.value as six_mo_forecast from `{source_table_no_bq}` \n        where predicted_on_date = '{predict_on_dt}' and date = '{six_month_dt}'),\n         geo_id as (select distinct geo_id, geo_name from `cpg-cdp.trendspotting.futurama_weekly`)\n    SELECT a.date, \n       geo_id.geo_name, \n       a.sentences, \n       cast(a.category_rank as int64) as current_rank, \n       cast(a.category_rank as int64) - b.six_mo_forecast as six_delta_rank,\n       cast(b.category_rank as int64) as six_mo_rank, \n       six_mo_forecast\n      FROM `{source_table_no_bq}` a INNER JOIN \n       six_mo_val b on a.series_id = b.series_id \n       inner join \n       geo_id on cast(a.geo_id as int64) = geo_id.geo_id\n      WHERE a.date = '{predict_on_dt}'\n      ) where current_rank > 500 and six_mo_forecast < 1000 order by six_delta_rank desc limit {top_n_results} \n)\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-nlp-featurize-and-cluster": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "nlp_featurize_and_cluster"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef nlp_featurize_and_cluster(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    subcat_id: int,\n    model_name: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n            RETURNS \n            STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                   p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                   p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                   p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                   p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n            AS (\n            STRUCT(\n                arr[OFFSET(0)]\n                , arr[OFFSET(1)]\n                , arr[OFFSET(2)]\n                , arr[OFFSET(3)]\n                , arr[OFFSET(4)]\n                , arr[OFFSET(5)]\n                , arr[OFFSET(6)]\n                , arr[OFFSET(7)]\n                , arr[OFFSET(8)]\n                , arr[OFFSET(9)]\n                , arr[OFFSET(10)]\n                , arr[OFFSET(11)]\n                , arr[OFFSET(12)]\n                , arr[OFFSET(13)]\n                , arr[OFFSET(14)]\n                , arr[OFFSET(15)]\n                , arr[OFFSET(16)]\n                , arr[OFFSET(17)]\n                , arr[OFFSET(18)]\n                , arr[OFFSET(19)]    \n            ));\n\n            CREATE OR REPLACE TABLE `{target_table}` as ( #\n                select * \n                from ML.PREDICT(MODEL `{model_name}`, (\n                    select *, arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT date, geo_name, term AS sentences, volume\n                      FROM `{source_table}`\n                      WHERE date >= '{train_st}'\n                      and category_id = {subcat_id}\n                    ))\n                    )\n                )\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-prep-forecast-term-level": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "prep_forecast_term_level"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef prep_forecast_term_level(\n    source_table: str,\n    target_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_train_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n        SELECT * except(embed), \n        embed.p1 as emb1, \n        embed.p2 as emb2,\n        embed.p3 as emb3,\n        embed.p4 as emb4,\n        embed.p5 as emb5,\n        embed.p6 as emb6,\n        embed.p7 as emb7,\n        embed.p8 as emb8,\n        embed.p9 as emb9,\n        embed.p10 as emb10,\n        embed.p11 as emb11,\n        embed.p12 as emb12,\n        embed.p13 as emb13,\n        embed.p14 as emb14,\n        embed.p15 as emb15,\n        embed.p16 as emb16,\n        embed.p17 as emb17,\n        embed.p18 as emb18,\n        embed.p19 as emb19,\n        embed.p20 as emb20\n\n        FROM `{source_table}` )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'bq://{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-time-series-dataset-create": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-time-series-dataset-create-2": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "v2-png-hair-22-trendspotting-pipeline-v2"
    },
    "root": {
      "dag": {
        "tasks": {
          "aggregate-clusters": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-aggregate-clusters"
            },
            "dependentTasks": [
              "nlp-featurize-and-cluster"
            ],
            "inputs": {
              "parameters": {
                "model_name": {
                  "componentInputParameter": "model_name"
                },
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_table",
                    "producerTask": "nlp-featurize-and-cluster"
                  }
                },
                "target_table": {
                  "componentInputParameter": "cluster_table_agg"
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                },
                "valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "aggregate-clusters"
            }
          },
          "automl-forecasting-training-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automl-forecasting-training-job"
            },
            "dependentTasks": [
              "time-series-dataset-create"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"date\"]"
                    }
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "budget_milli_node_hours"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"timestamp\": {\"columnName\": \"date\"}}, {\"categorical\": {\"columnName\": \"geo_id\"}}, {\"text\": {\"columnName\": \"sentences\"}}, {\"numeric\": {\"columnName\": \"category_rank\"}}, {\"numeric\": {\"columnName\": \"emb1\"}}, {\"numeric\": {\"columnName\": \"emb2\"}}, {\"numeric\": {\"columnName\": \"emb3\"}}, {\"numeric\": {\"columnName\": \"emb4\"}}, {\"numeric\": {\"columnName\": \"emb5\"}}, {\"numeric\": {\"columnName\": \"emb6\"}}, {\"numeric\": {\"columnName\": \"emb7\"}}, {\"numeric\": {\"columnName\": \"emb8\"}}, {\"numeric\": {\"columnName\": \"emb9\"}}, {\"numeric\": {\"columnName\": \"emb10\"}}, {\"numeric\": {\"columnName\": \"emb11\"}}, {\"numeric\": {\"columnName\": \"emb12\"}}, {\"numeric\": {\"columnName\": \"emb13\"}}, {\"numeric\": {\"columnName\": \"emb14\"}}, {\"numeric\": {\"columnName\": \"emb15\"}}, {\"numeric\": {\"columnName\": \"emb16\"}}, {\"numeric\": {\"columnName\": \"emb17\"}}, {\"numeric\": {\"columnName\": \"emb18\"}}, {\"numeric\": {\"columnName\": \"emb19\"}}, {\"numeric\": {\"columnName\": \"emb20\"}}]"
                    }
                  }
                },
                "context_window": {
                  "componentInputParameter": "context_window"
                },
                "data_granularity_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "data_granularity_unit": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "week"
                    }
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "train-point-forecast-futurama"
                    }
                  }
                },
                "export_evaluated_data_items": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "target_term_forecast_table"
                },
                "export_evaluated_data_items_override_destination": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "model_display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "point-forecast-futurama"
                    }
                  }
                },
                "optimization_objective": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "minimize-rmse"
                    }
                  }
                },
                "predefined_split_column_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "split_col"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                },
                "target_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "category_rank"
                    }
                  }
                },
                "time_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "date"
                    }
                  }
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"geo_name\", \"geo_id\", \"category_id\", \"term\", \"emb1\", \"emb2\", \"emb3\", \"emb4\", \"emb5\", \"emb6\", \"emb7\", \"emb8\", \"emb9\", \"emb10\", \"emb11\", \"emb12\", \"emb13\", \"emb14\", \"emb15\", \"emb16\", \"emb17\", \"emb18\", \"emb19\", \"emb20\", \"sentences\"]"
                    }
                  }
                },
                "time_series_identifier_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "series_id"
                    }
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"category_rank\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "automl-forecasting-training-job"
            }
          },
          "automl-forecasting-training-job-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automl-forecasting-training-job-2"
            },
            "dependentTasks": [
              "time-series-dataset-create-2"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create-2"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"date\"]"
                    }
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "budget_milli_node_hours_cluster"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"numeric\": {\"columnName\": \"volume\"}}, {\"timestamp\": {\"columnName\": \"date\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p1\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p2\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p3\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p4\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p5\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p6\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p7\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p8\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p9\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p10\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p11\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p12\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p13\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p14\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p15\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p16\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p17\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p18\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p19\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p20\"}}]"
                    }
                  }
                },
                "context_window": {
                  "componentInputParameter": "context_window"
                },
                "data_granularity_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "data_granularity_unit": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "week"
                    }
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "train-cluster-forecast-futurama"
                    }
                  }
                },
                "export_evaluated_data_items": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "target_cluster_forecast_table"
                },
                "export_evaluated_data_items_override_destination": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "model_display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cluster-forecast-futurama"
                    }
                  }
                },
                "optimization_objective": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "minimize-rmse"
                    }
                  }
                },
                "predefined_split_column_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "split_col"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                },
                "target_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "volume"
                    }
                  }
                },
                "time_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "date"
                    }
                  }
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"comments_embed_p1\", \"comments_embed_p2\", \"comments_embed_p3\", \"comments_embed_p4\", \"comments_embed_p5\", \"comments_embed_p6\", \"comments_embed_p7\", \"comments_embed_p8\", \"comments_embed_p9\", \"comments_embed_p10\", \"comments_embed_p11\", \"comments_embed_p12\", \"comments_embed_p13\", \"comments_embed_p14\", \"comments_embed_p15\", \"comments_embed_p16\", \"comments_embed_p17\", \"comments_embed_p18\", \"comments_embed_p19\", \"comments_embed_p20\"]"
                    }
                  }
                },
                "time_series_identifier_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "centroid_id"
                    }
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"volume\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "automl-forecasting-training-job-2"
            }
          },
          "bigquery-create-model-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-create-model-job"
            },
            "inputs": {
              "parameters": {
                "job_configuration_query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "US"
                    }
                  }
                },
                "pipelineparam--model_name": {
                  "componentInputParameter": "model_name"
                },
                "pipelineparam--n_clusters": {
                  "componentInputParameter": "n_clusters"
                },
                "pipelineparam--source_table": {
                  "componentInputParameter": "source_table"
                },
                "pipelineparam--subcat_id": {
                  "componentInputParameter": "subcat_id"
                },
                "pipelineparam--train_st": {
                  "componentInputParameter": "train_st"
                },
                "project": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n                        RETURNS \n                        STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                               p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                               p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                               p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                               p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n                        AS (\n                        STRUCT(\n                            arr[OFFSET(0)]\n                            , arr[OFFSET(1)]\n                            , arr[OFFSET(2)]\n                            , arr[OFFSET(3)]\n                            , arr[OFFSET(4)]\n                            , arr[OFFSET(5)]\n                            , arr[OFFSET(6)]\n                            , arr[OFFSET(7)]\n                            , arr[OFFSET(8)]\n                            , arr[OFFSET(9)]\n                            , arr[OFFSET(10)]\n                            , arr[OFFSET(11)]\n                            , arr[OFFSET(12)]\n                            , arr[OFFSET(13)]\n                            , arr[OFFSET(14)]\n                            , arr[OFFSET(15)]\n                            , arr[OFFSET(16)]\n                            , arr[OFFSET(17)]\n                            , arr[OFFSET(18)]\n                            , arr[OFFSET(19)]    \n                        ));\n                        \n            CREATE OR REPLACE MODEL `{{$.inputs.parameters['pipelineparam--model_name']}}` OPTIONS(model_type='kmeans', KMEANS_INIT_METHOD='KMEANS++', num_clusters={{$.inputs.parameters['pipelineparam--n_clusters']}}) AS\n                    select arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT date, geo_name, term AS sentences, volume\n                      FROM `{{$.inputs.parameters['pipelineparam--source_table']}}`\n                      WHERE date >= '{{$.inputs.parameters['pipelineparam--train_st']}}'\n                      and category_id = {{$.inputs.parameters['pipelineparam--subcat_id']}}\n                      ))\n    "
                    }
                  }
                },
                "query_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "bigquery-create-model-job"
            }
          },
          "create-prediction-dataset-term-level": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-create-prediction-dataset-term-level"
            },
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table_uri": {
                  "componentInputParameter": "source_table"
                },
                "subcat_id": {
                  "componentInputParameter": "subcat_id"
                },
                "target_table": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp.trendspotting.ETL_futurama_weekly_embed_png_hair_22"
                    }
                  }
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                },
                "valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "create-prediction-dataset-term-level"
            }
          },
          "create-top-mover-table": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-create-top-mover-table"
            },
            "dependentTasks": [
              "automl-forecasting-training-job"
            ],
            "inputs": {
              "artifacts": {
                "trained_model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "automl-forecasting-training-job"
                  }
                }
              },
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "predict_on_dt": {
                  "componentInputParameter": "predict_on_dt"
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "six_month_dt": {
                  "componentInputParameter": "six_month_dt"
                },
                "source_table": {
                  "componentInputParameter": "target_term_forecast_table"
                },
                "target_table": {
                  "componentInputParameter": "top_movers_target_table"
                },
                "top_n_results": {
                  "componentInputParameter": "top_n_results"
                }
              }
            },
            "taskInfo": {
              "name": "create-top-mover-table"
            }
          },
          "nlp-featurize-and-cluster": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-nlp-featurize-and-cluster"
            },
            "dependentTasks": [
              "bigquery-create-model-job"
            ],
            "inputs": {
              "parameters": {
                "model_name": {
                  "componentInputParameter": "model_name"
                },
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "componentInputParameter": "source_table"
                },
                "subcat_id": {
                  "componentInputParameter": "subcat_id"
                },
                "target_table": {
                  "componentInputParameter": "cluster_table"
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                }
              }
            },
            "taskInfo": {
              "name": "nlp-featurize-and-cluster"
            }
          },
          "prep-forecast-term-level": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-prep-forecast-term-level"
            },
            "dependentTasks": [
              "create-prediction-dataset-term-level"
            ],
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "training_data_table_uri",
                    "producerTask": "create-prediction-dataset-term-level"
                  }
                },
                "target_table": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp.trendspotting.ETL_futurama_weekly_embed_aml_pl_png_hair_22"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "prep-forecast-term-level"
            }
          },
          "time-series-dataset-create": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create"
            },
            "dependentTasks": [
              "prep-forecast-term-level"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_train_table",
                    "producerTask": "prep-forecast-term-level"
                  }
                },
                "display_name": {
                  "componentInputParameter": "ds_display_name_terms"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "time-series-dataset-create"
            }
          },
          "time-series-dataset-create-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create-2"
            },
            "dependentTasks": [
              "aggregate-clusters"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_agg_table",
                    "producerTask": "aggregate-clusters"
                  }
                },
                "display_name": {
                  "componentInputParameter": "ds_display_name_cluster"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "time-series-dataset-create-2"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "budget_milli_node_hours": {
            "type": "INT"
          },
          "budget_milli_node_hours_cluster": {
            "type": "INT"
          },
          "cluster_table": {
            "type": "STRING"
          },
          "cluster_table_agg": {
            "type": "STRING"
          },
          "context_window": {
            "type": "INT"
          },
          "ds_display_name_cluster": {
            "type": "STRING"
          },
          "ds_display_name_terms": {
            "type": "STRING"
          },
          "forecast_horizon": {
            "type": "INT"
          },
          "k_means_name": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "model_name": {
            "type": "STRING"
          },
          "n_clusters": {
            "type": "INT"
          },
          "override": {
            "type": "STRING"
          },
          "predict_on_dt": {
            "type": "STRING"
          },
          "six_month_dt": {
            "type": "STRING"
          },
          "source_table": {
            "type": "STRING"
          },
          "subcat_id": {
            "type": "INT"
          },
          "target_cluster_forecast_table": {
            "type": "STRING"
          },
          "target_term_forecast_table": {
            "type": "STRING"
          },
          "top_movers_target_table": {
            "type": "STRING"
          },
          "top_n_results": {
            "type": "INT"
          },
          "train_end": {
            "type": "STRING"
          },
          "train_st": {
            "type": "STRING"
          },
          "valid_end": {
            "type": "STRING"
          },
          "valid_st": {
            "type": "STRING"
          },
          "version": {
            "type": "STRING"
          },
          "vertex_project": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.12"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://trendspotting-pipeline"
  }
}