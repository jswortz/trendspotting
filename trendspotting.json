{
  "pipelineSpec": {
    "components": {
      "comp-aggregate-clusters": {
        "executorLabel": "exec-aggregate-clusters",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_agg_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-automlforecastingtrainingjob-run-with-experiments": {
        "executorLabel": "exec-automlforecastingtrainingjob-run-with-experiments",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-nlp-featurize-and-cluster": {
        "executorLabel": "exec-nlp-featurize-and-cluster",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "subcat_id": {
              "type": "INT"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-time-series-dataset-create": {
        "executorLabel": "exec-time-series-dataset-create",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-aggregate-clusters": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "aggregate_clusters"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef aggregate_clusters(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_agg_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    target_bq_table = 'bq://' + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE {target_table} as (\n            with centroids as (select * from \n            (SELECT\n            centroid_id, feature, numerical_value\n            FROM\n              ML.CENTROIDS(MODEL `trendspotting.embed_clustering_100`)\n            )\n            PIVOT(avg(numerical_value) for feature in ('comments_embed_p1',\n            'comments_embed_p2',\n            'comments_embed_p3',\n            'comments_embed_p4',\n            'comments_embed_p5',\n            'comments_embed_p6',\n            'comments_embed_p7',\n            'comments_embed_p8',\n            'comments_embed_p9',\n            'comments_embed_p10',\n            'comments_embed_p11',\n            'comments_embed_p12',\n            'comments_embed_p13',\n            'comments_embed_p14',\n            'comments_embed_p15',\n            'comments_embed_p16',\n            'comments_embed_p17',\n            'comments_embed_p18',\n            'comments_embed_p19',\n            'comments_embed_p20'))\n                              )\n            select volume, date, b.*,\n            case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                      when date between '{valid_start}' and '{valid_end}' then 'VALIDATE'\n                     else 'TEST' end as split_col\n            from (\n                select sum(volume) as volume, date, centroid_id \n                from {source_table} group by date, centroid_id\n            ) a\n            inner join centroids b on a.centroid_id = b.centroid_id\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_bq_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-automlforecastingtrainingjob-run-with-experiments": {
          "container": {
            "args": [
              "--init.display_name",
              "train-cluster-forecast-futurama",
              "--init.optimization_objective",
              "minimize-rmse",
              "--method.model_display_name",
              "cluster-forecast-futurama",
              "--method.export_evaluated_data_items",
              "True",
              "--method.export_evaluated_data_items_override_destination",
              "True",
              "--method.target_column",
              "volume",
              "--method.time_column",
              "date",
              "--method.time_series_identifier_column",
              "centroid_id",
              "--method.data_granularity_unit",
              "week",
              "--method.data_granularity_count",
              "1",
              "--method.predefined_split_column_name",
              "split_col",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "_run_with_experiments"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:latest"
          }
        },
        "exec-nlp-featurize-and-cluster": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "nlp_featurize_and_cluster"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef nlp_featurize_and_cluster(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    subcat_id: int = 10047,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n            RETURNS \n            STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                   p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                   p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                   p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                   p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n            AS (\n            STRUCT(\n                arr[OFFSET(0)]\n                , arr[OFFSET(1)]\n                , arr[OFFSET(2)]\n                , arr[OFFSET(3)]\n                , arr[OFFSET(4)]\n                , arr[OFFSET(5)]\n                , arr[OFFSET(6)]\n                , arr[OFFSET(7)]\n                , arr[OFFSET(8)]\n                , arr[OFFSET(9)]\n                , arr[OFFSET(10)]\n                , arr[OFFSET(11)]\n                , arr[OFFSET(12)]\n                , arr[OFFSET(13)]\n                , arr[OFFSET(14)]\n                , arr[OFFSET(15)]\n                , arr[OFFSET(16)]\n                , arr[OFFSET(17)]\n                , arr[OFFSET(18)]\n                , arr[OFFSET(19)]    \n            ));\n\n            CREATE OR REPLACE TABLE {target_table} as ( #\n                select * \n                from ML.PREDICT(MODEL trendspotting.embed_clustering_100, (\n                    select *, arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT date, geo_name, term AS sentences, volume\n                      FROM {source_table}\n                      WHERE date between '{train_st}' and '{train_end}' and category_id = {subcat_id}\n                    ))\n                    )\n                )\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-time-series-dataset-create": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:latest"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "report-pipe-trendspotting-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "aggregate-clusters": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-aggregate-clusters"
            },
            "dependentTasks": [
              "nlp-featurize-and-cluster"
            ],
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_table",
                    "producerTask": "nlp-featurize-and-cluster"
                  }
                },
                "target_table": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp.trendspotting.futurama_weekly_embed_cluster_agg_100"
                    }
                  }
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                },
                "valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "aggregate-clusters"
            }
          },
          "automlforecastingtrainingjob-run-with-experiments": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automlforecastingtrainingjob-run-with-experiments"
            },
            "dependentTasks": [
              "time-series-dataset-create"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"date\"]"
                    }
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "budget_milli_node_hours"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"timestamp\": {\"columnName\": \"date\"}}, {\"categorical\": {\"columnName\": \"geo_id\"}}, {\"text\": {\"columnName\": \"sentences\"}}, {\"numeric\": {\"columnName\": \"category_rank\"}}, {\"numeric\": {\"columnName\": \"emb1\"}}, {\"numeric\": {\"columnName\": \"emb2\"}}, {\"numeric\": {\"columnName\": \"emb3\"}}, {\"numeric\": {\"columnName\": \"emb4\"}}, {\"numeric\": {\"columnName\": \"emb5\"}}, {\"numeric\": {\"columnName\": \"emb6\"}}, {\"numeric\": {\"columnName\": \"emb7\"}}, {\"numeric\": {\"columnName\": \"emb8\"}}, {\"numeric\": {\"columnName\": \"emb9\"}}, {\"numeric\": {\"columnName\": \"emb10\"}}, {\"numeric\": {\"columnName\": \"emb11\"}}, {\"numeric\": {\"columnName\": \"emb12\"}}, {\"numeric\": {\"columnName\": \"emb13\"}}, {\"numeric\": {\"columnName\": \"emb14\"}}, {\"numeric\": {\"columnName\": \"emb15\"}}, {\"numeric\": {\"columnName\": \"emb16\"}}, {\"numeric\": {\"columnName\": \"emb17\"}}, {\"numeric\": {\"columnName\": \"emb18\"}}, {\"numeric\": {\"columnName\": \"emb19\"}}, {\"numeric\": {\"columnName\": \"emb20\"}}]"
                    }
                  }
                },
                "context_window": {
                  "componentInputParameter": "context_window"
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "target_cluster_forecast_table"
                },
                "forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"comments_emb_p1\", \"comments_emb_p2\", \"comments_emb_p3\", \"comments_emb_p4\", \"comments_emb_p5\", \"comments_emb_p6\", \"comments_emb_p7\", \"comments_emb_p8\", \"comments_emb_p9\", \"comments_emb_p10\", \"comments_emb_p11\", \"comments_emb_p12\", \"comments_emb_p13\", \"comments_emb_p14\", \"comments_emb_p15\", \"comments_emb_p16\", \"comments_emb_p17\", \"comments_emb_p18\", \"comments_emb_p19\", \"comments_emb_p20\"]"
                    }
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"volume\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "automlforecastingtrainingjob-run-with-experiments"
            }
          },
          "nlp-featurize-and-cluster": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-nlp-featurize-and-cluster"
            },
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "componentInputParameter": "source_table"
                },
                "subcat_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "10047"
                    }
                  }
                },
                "target_table": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp.trendspotting.futurama_weekly_embed_cluster_100"
                    }
                  }
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                }
              }
            },
            "taskInfo": {
              "name": "nlp-featurize-and-cluster"
            }
          },
          "time-series-dataset-create": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create"
            },
            "dependentTasks": [
              "aggregate-clusters"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_agg_table",
                    "producerTask": "aggregate-clusters"
                  }
                },
                "display_name": {
                  "componentInputParameter": "ds_display_name_cluster"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "time-series-dataset-create"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "budget_milli_node_hours": {
            "type": "INT"
          },
          "context_window": {
            "type": "INT"
          },
          "ds_display_name_cluster": {
            "type": "STRING"
          },
          "ds_display_name_terms": {
            "type": "STRING"
          },
          "forecast_horizon": {
            "type": "INT"
          },
          "k_means_name": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "n_clusters": {
            "type": "INT"
          },
          "override": {
            "type": "STRING"
          },
          "predict_on_dt": {
            "type": "STRING"
          },
          "six_month_dt": {
            "type": "STRING"
          },
          "source_table": {
            "type": "STRING"
          },
          "target_cluster_forecast_table": {
            "type": "STRING"
          },
          "target_term_forecast_table": {
            "type": "STRING"
          },
          "top_n_results": {
            "type": "INT"
          },
          "train_end": {
            "type": "STRING"
          },
          "train_st": {
            "type": "STRING"
          },
          "valid_end": {
            "type": "STRING"
          },
          "valid_st": {
            "type": "STRING"
          },
          "version": {
            "type": "STRING"
          },
          "vertex_project": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://trendspotting-pipeline",
    "parameters": {
      "budget_milli_node_hours": {
        "intValue": "1000"
      },
      "source_table": {
        "stringValue": "cpg-cdp.trendspotting.futurama_weekly"
      },
      "target_cluster_forecast_table": {
        "stringValue": "cpg-cdp.trendspotting.predict_cluster"
      },
      "target_term_forecast_table": {
        "stringValue": "cpg-cdp.trendspotting.predict"
      }
    }
  }
}