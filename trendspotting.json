{
  "pipelineSpec": {
    "components": {
      "comp-aggregate-clusters": {
        "executorLabel": "exec-aggregate-clusters",
        "inputDefinitions": {
          "parameters": {
            "category_table": {
              "type": "STRING"
            },
            "model_name": {
              "type": "STRING"
            },
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_agg_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-aggregate-clusters-basic": {
        "executorLabel": "exec-aggregate-clusters-basic",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_agg_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-alter-basic-cluster-forecast-table": {
        "executorLabel": "exec-alter-basic-cluster-forecast-table",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-alter-basic-cluster-term-table": {
        "executorLabel": "exec-alter-basic-cluster-term-table",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-alter-topmover-schema": {
        "executorLabel": "exec-alter-topmover-schema",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-auto-cluster": {
        "executorLabel": "exec-auto-cluster",
        "inputDefinitions": {
          "parameters": {
            "classified_terms_table": {
              "type": "STRING"
            },
            "cluster_max": {
              "type": "INT"
            },
            "cluster_min": {
              "type": "INT"
            },
            "cluster_train_table": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-automl-forecasting-training-job": {
        "executorLabel": "exec-automl-forecasting-training-job",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "data_granularity_count": {
              "type": "INT"
            },
            "data_granularity_unit": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "export_evaluated_data_items": {
              "type": "STRING"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "export_evaluated_data_items_override_destination": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_display_name": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "predefined_split_column_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "time_column": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "time_series_identifier_column": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-automl-forecasting-training-job-2": {
        "executorLabel": "exec-automl-forecasting-training-job-2",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "data_granularity_count": {
              "type": "INT"
            },
            "data_granularity_unit": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "export_evaluated_data_items": {
              "type": "STRING"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "export_evaluated_data_items_override_destination": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_display_name": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "predefined_split_column_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "time_column": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "time_series_identifier_column": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-automl-forecasting-training-job-3": {
        "executorLabel": "exec-automl-forecasting-training-job-3",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "available_at_forecast_columns": {
              "type": "STRING"
            },
            "budget_milli_node_hours": {
              "type": "INT"
            },
            "column_transformations": {
              "type": "STRING"
            },
            "context_window": {
              "type": "INT"
            },
            "data_granularity_count": {
              "type": "INT"
            },
            "data_granularity_unit": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "export_evaluated_data_items": {
              "type": "STRING"
            },
            "export_evaluated_data_items_bigquery_destination_uri": {
              "type": "STRING"
            },
            "export_evaluated_data_items_override_destination": {
              "type": "STRING"
            },
            "forecast_horizon": {
              "type": "INT"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "model_display_name": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "predefined_split_column_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "time_column": {
              "type": "STRING"
            },
            "time_series_attribute_columns": {
              "type": "STRING"
            },
            "time_series_identifier_column": {
              "type": "STRING"
            },
            "unavailable_at_forecast_columns": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-bigquery-create-model-job": {
        "executorLabel": "exec-bigquery-create-model-job",
        "inputDefinitions": {
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-1": {
        "dag": {
          "tasks": {
            "aggregate-clusters": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-aggregate-clusters"
              },
              "dependentTasks": [
                "auto-cluster"
              ],
              "inputs": {
                "parameters": {
                  "category_table": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "auto-cluster"
                    }
                  },
                  "model_name": {
                    "componentInputParameter": "pipelineparam--model_name"
                  },
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--cluster_table"
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--cluster_table_agg"
                  },
                  "train_end": {
                    "componentInputParameter": "pipelineparam--train_end"
                  },
                  "train_st": {
                    "componentInputParameter": "pipelineparam--train_st"
                  },
                  "valid_end": {
                    "componentInputParameter": "pipelineparam--valid_end"
                  },
                  "valid_st": {
                    "componentInputParameter": "pipelineparam--valid_st"
                  }
                }
              },
              "taskInfo": {
                "name": "Aggregate category clusters"
              }
            },
            "auto-cluster": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-auto-cluster"
              },
              "dependentTasks": [
                "train-classification-model"
              ],
              "inputs": {
                "parameters": {
                  "classified_terms_table": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "train-classification-model"
                    }
                  },
                  "cluster_max": {
                    "componentInputParameter": "pipelineparam--auto_max_cluster"
                  },
                  "cluster_min": {
                    "componentInputParameter": "pipelineparam--auto_min_cluster"
                  },
                  "cluster_train_table": {
                    "componentInputParameter": "pipelineparam--auto_cluster_train_table"
                  },
                  "labels": {
                    "componentInputParameter": "pipelineparam--label_list"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--auto_cluster_target_table"
                  }
                }
              },
              "taskInfo": {
                "name": "Auto cluster each category"
              }
            },
            "automl-forecasting-training-job-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-automl-forecasting-training-job-2"
              },
              "dependentTasks": [
                "time-series-dataset-create-2"
              ],
              "inputs": {
                "artifacts": {
                  "dataset": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "dataset",
                      "producerTask": "time-series-dataset-create-2"
                    }
                  }
                },
                "parameters": {
                  "available_at_forecast_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"date\"]"
                      }
                    }
                  },
                  "budget_milli_node_hours": {
                    "componentInputParameter": "pipelineparam--budget_milli_node_hours_cluster"
                  },
                  "column_transformations": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[{\"numeric\": {\"columnName\": \"score\"}}, {\"timestamp\": {\"columnName\": \"date\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p1\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p2\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p3\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p4\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p5\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p6\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p7\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p8\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p9\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p10\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p11\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p12\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p13\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p14\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p15\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p16\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p17\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p18\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p19\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p20\"}}]"
                      }
                    }
                  },
                  "context_window": {
                    "componentInputParameter": "pipelineparam--context_window"
                  },
                  "data_granularity_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "data_granularity_unit": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "week"
                      }
                    }
                  },
                  "display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "train-cluster-forecast-futurama"
                      }
                    }
                  },
                  "export_evaluated_data_items": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "export_evaluated_data_items_bigquery_destination_uri": {
                    "componentInputParameter": "pipelineparam--target_cluster_forecast_table"
                  },
                  "export_evaluated_data_items_override_destination": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "forecast_horizon": {
                    "componentInputParameter": "pipelineparam--forecast_horizon"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "model_display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cluster-forecast-futurama"
                      }
                    }
                  },
                  "optimization_objective": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "minimize-rmse"
                      }
                    }
                  },
                  "predefined_split_column_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "split_col"
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  },
                  "target_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "score"
                      }
                    }
                  },
                  "time_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "date"
                      }
                    }
                  },
                  "time_series_attribute_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"topic_id\", \"category\", \"comments_embed_p1\", \"comments_embed_p2\", \"comments_embed_p3\", \"comments_embed_p4\", \"comments_embed_p5\", \"comments_embed_p6\", \"comments_embed_p7\", \"comments_embed_p8\", \"comments_embed_p9\", \"comments_embed_p10\", \"comments_embed_p11\", \"comments_embed_p12\", \"comments_embed_p13\", \"comments_embed_p14\", \"comments_embed_p15\", \"comments_embed_p16\", \"comments_embed_p17\", \"comments_embed_p18\", \"comments_embed_p19\", \"comments_embed_p20\"]"
                      }
                    }
                  },
                  "time_series_identifier_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "series_id"
                      }
                    }
                  },
                  "unavailable_at_forecast_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"score\"]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Forecast category clusters"
              }
            },
            "time-series-dataset-create-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-time-series-dataset-create-2"
              },
              "dependentTasks": [
                "aggregate-clusters"
              ],
              "inputs": {
                "parameters": {
                  "bq_source": {
                    "taskOutputParameter": {
                      "outputParameterKey": "term_cluster_agg_table",
                      "producerTask": "aggregate-clusters"
                    }
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--ds_display_name_cluster"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  }
                }
              },
              "taskInfo": {
                "name": "Forecast term-level"
              }
            },
            "train-classification-model": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-train-classification-model"
              },
              "inputs": {
                "parameters": {
                  "classification_budget_hours": {
                    "componentInputParameter": "pipelineparam--classification_model_budget"
                  },
                  "classification_model_name": {
                    "componentInputParameter": "pipelineparam--classification_model_name"
                  },
                  "label_table": {
                    "componentInputParameter": "pipelineparam--label_table"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--prep-forecast-term-level-term_train_table"
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--scored_classification_table"
                  },
                  "train_table": {
                    "componentInputParameter": "pipelineparam--classification_train_table"
                  }
                }
              },
              "taskInfo": {
                "name": "Train classification model on examples"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--auto_cluster_target_table": {
              "type": "STRING"
            },
            "pipelineparam--auto_cluster_train_table": {
              "type": "STRING"
            },
            "pipelineparam--auto_max_cluster": {
              "type": "INT"
            },
            "pipelineparam--auto_min_cluster": {
              "type": "INT"
            },
            "pipelineparam--budget_milli_node_hours_cluster": {
              "type": "INT"
            },
            "pipelineparam--classification_model_budget": {
              "type": "INT"
            },
            "pipelineparam--classification_model_name": {
              "type": "STRING"
            },
            "pipelineparam--classification_train_table": {
              "type": "STRING"
            },
            "pipelineparam--cluster_table": {
              "type": "STRING"
            },
            "pipelineparam--cluster_table_agg": {
              "type": "STRING"
            },
            "pipelineparam--context_window": {
              "type": "INT"
            },
            "pipelineparam--ds_display_name_cluster": {
              "type": "STRING"
            },
            "pipelineparam--forecast_horizon": {
              "type": "INT"
            },
            "pipelineparam--if-tbl-exists-Output": {
              "type": "STRING"
            },
            "pipelineparam--label_list": {
              "type": "STRING"
            },
            "pipelineparam--label_table": {
              "type": "STRING"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--model_name": {
              "type": "STRING"
            },
            "pipelineparam--prep-forecast-term-level-term_train_table": {
              "type": "STRING"
            },
            "pipelineparam--scored_classification_table": {
              "type": "STRING"
            },
            "pipelineparam--target_cluster_forecast_table": {
              "type": "STRING"
            },
            "pipelineparam--train_end": {
              "type": "STRING"
            },
            "pipelineparam--train_st": {
              "type": "STRING"
            },
            "pipelineparam--valid_end": {
              "type": "STRING"
            },
            "pipelineparam--valid_st": {
              "type": "STRING"
            },
            "pipelineparam--vertex_project": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-2": {
        "dag": {
          "tasks": {
            "aggregate-clusters-basic": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-aggregate-clusters-basic"
              },
              "dependentTasks": [
                "nlp-featurize-and-cluster"
              ],
              "inputs": {
                "parameters": {
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "taskOutputParameter": {
                      "outputParameterKey": "term_cluster_table",
                      "producerTask": "nlp-featurize-and-cluster"
                    }
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--cluster_table_agg_basic"
                  },
                  "train_end": {
                    "componentInputParameter": "pipelineparam--train_end"
                  },
                  "train_st": {
                    "componentInputParameter": "pipelineparam--train_st"
                  },
                  "valid_end": {
                    "componentInputParameter": "pipelineparam--valid_end"
                  },
                  "valid_st": {
                    "componentInputParameter": "pipelineparam--valid_st"
                  }
                }
              },
              "taskInfo": {
                "name": "Basic clustering (unsupervised)"
              }
            },
            "alter-basic-cluster-forecast-table": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-alter-basic-cluster-forecast-table"
              },
              "dependentTasks": [
                "create-partitioned-forecast-table"
              ],
              "inputs": {
                "parameters": {
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--target_cluster_forecast_table_basic_partitioned"
                  }
                }
              },
              "taskInfo": {
                "name": "Adding table descriptions"
              }
            },
            "alter-basic-cluster-term-table": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-alter-basic-cluster-term-table"
              },
              "dependentTasks": [
                "nlp-featurize-and-cluster"
              ],
              "inputs": {
                "parameters": {
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--cluster_table"
                  }
                }
              },
              "taskInfo": {
                "name": "Altering table descriptions"
              }
            },
            "automl-forecasting-training-job-3": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-automl-forecasting-training-job-3"
              },
              "dependentTasks": [
                "time-series-dataset-create-3"
              ],
              "inputs": {
                "artifacts": {
                  "dataset": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "dataset",
                      "producerTask": "time-series-dataset-create-3"
                    }
                  }
                },
                "parameters": {
                  "available_at_forecast_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"date\"]"
                      }
                    }
                  },
                  "budget_milli_node_hours": {
                    "componentInputParameter": "pipelineparam--budget_milli_node_hours_cluster"
                  },
                  "column_transformations": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[{\"numeric\": {\"columnName\": \"score\"}}, {\"timestamp\": {\"columnName\": \"date\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p1\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p2\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p3\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p4\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p5\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p6\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p7\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p8\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p9\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p10\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p11\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p12\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p13\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p14\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p15\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p16\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p17\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p18\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p19\"}}, {\"numeric\": {\"columnName\": \"comments_embed_p20\"}}]"
                      }
                    }
                  },
                  "context_window": {
                    "componentInputParameter": "pipelineparam--context_window"
                  },
                  "data_granularity_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "data_granularity_unit": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "day"
                      }
                    }
                  },
                  "display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "train-cluster-forecast-futurama"
                      }
                    }
                  },
                  "export_evaluated_data_items": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "export_evaluated_data_items_bigquery_destination_uri": {
                    "componentInputParameter": "pipelineparam--target_cluster_forecast_table_basic"
                  },
                  "export_evaluated_data_items_override_destination": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "forecast_horizon": {
                    "componentInputParameter": "pipelineparam--forecast_horizon"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "model_display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cluster-forecast-futurama"
                      }
                    }
                  },
                  "optimization_objective": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "minimize-rmse"
                      }
                    }
                  },
                  "predefined_split_column_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "split_col"
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  },
                  "target_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "score"
                      }
                    }
                  },
                  "time_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "date"
                      }
                    }
                  },
                  "time_series_attribute_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"comments_embed_p1\", \"comments_embed_p2\", \"comments_embed_p3\", \"comments_embed_p4\", \"comments_embed_p5\", \"comments_embed_p6\", \"comments_embed_p7\", \"comments_embed_p8\", \"comments_embed_p9\", \"comments_embed_p10\", \"comments_embed_p11\", \"comments_embed_p12\", \"comments_embed_p13\", \"comments_embed_p14\", \"comments_embed_p15\", \"comments_embed_p16\", \"comments_embed_p17\", \"comments_embed_p18\", \"comments_embed_p19\", \"comments_embed_p20\"]"
                      }
                    }
                  },
                  "time_series_identifier_column": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "topic_id"
                      }
                    }
                  },
                  "unavailable_at_forecast_columns": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[\"score\"]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Forecast basic clusters"
              }
            },
            "bigquery-create-model-job": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-bigquery-create-model-job"
              },
              "inputs": {
                "parameters": {
                  "job_configuration_query": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "US"
                      }
                    }
                  },
                  "pipelineparam--model_name": {
                    "componentInputParameter": "pipelineparam--model_name"
                  },
                  "pipelineparam--n_clusters": {
                    "componentInputParameter": "pipelineparam--n_clusters"
                  },
                  "pipelineparam--source_table": {
                    "componentInputParameter": "pipelineparam--source_table"
                  },
                  "pipelineparam--subcat_id": {
                    "componentInputParameter": "pipelineparam--subcat_id"
                  },
                  "pipelineparam--train_st": {
                    "componentInputParameter": "pipelineparam--train_st"
                  },
                  "project": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "query": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n                        RETURNS \n                        STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                               p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                               p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                               p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                               p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n                        AS (\n                        STRUCT(\n                            arr[OFFSET(0)]\n                            , arr[OFFSET(1)]\n                            , arr[OFFSET(2)]\n                            , arr[OFFSET(3)]\n                            , arr[OFFSET(4)]\n                            , arr[OFFSET(5)]\n                            , arr[OFFSET(6)]\n                            , arr[OFFSET(7)]\n                            , arr[OFFSET(8)]\n                            , arr[OFFSET(9)]\n                            , arr[OFFSET(10)]\n                            , arr[OFFSET(11)]\n                            , arr[OFFSET(12)]\n                            , arr[OFFSET(13)]\n                            , arr[OFFSET(14)]\n                            , arr[OFFSET(15)]\n                            , arr[OFFSET(16)]\n                            , arr[OFFSET(17)]\n                            , arr[OFFSET(18)]\n                            , arr[OFFSET(19)]    \n                        ));\n                        \n            CREATE OR REPLACE MODEL `{{$.inputs.parameters['pipelineparam--model_name']}}` OPTIONS(model_type='kmeans', KMEANS_INIT_METHOD='KMEANS++', num_clusters={{$.inputs.parameters['pipelineparam--n_clusters']}}) AS\n                    select arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT date, geo_name, term AS sentences, score\n                      FROM `{{$.inputs.parameters['pipelineparam--source_table']}}`\n                      WHERE date >= '{{$.inputs.parameters['pipelineparam--train_st']}}'\n                      and category_id = {{$.inputs.parameters['pipelineparam--subcat_id']}}\n                      ))\n    "
                      }
                    }
                  },
                  "query_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Train k-means basic BQ Model"
              }
            },
            "create-partitioned-forecast-table": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-create-partitioned-forecast-table"
              },
              "dependentTasks": [
                "automl-forecasting-training-job-3"
              ],
              "inputs": {
                "parameters": {
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--target_cluster_forecast_table_basic"
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--target_cluster_forecast_table_basic_partitioned"
                  }
                }
              },
              "taskInfo": {
                "name": "Creating final partitioned table"
              }
            },
            "nlp-featurize-and-cluster": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-nlp-featurize-and-cluster"
              },
              "dependentTasks": [
                "bigquery-create-model-job"
              ],
              "inputs": {
                "parameters": {
                  "model_name": {
                    "componentInputParameter": "pipelineparam--model_name"
                  },
                  "n_clusters": {
                    "componentInputParameter": "pipelineparam--n_clusters"
                  },
                  "override": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "False"
                      }
                    }
                  },
                  "project_id": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "cpg-cdp"
                      }
                    }
                  },
                  "source_table": {
                    "componentInputParameter": "pipelineparam--source_table"
                  },
                  "subcat_id": {
                    "componentInputParameter": "pipelineparam--subcat_id"
                  },
                  "target_table": {
                    "componentInputParameter": "pipelineparam--cluster_table"
                  },
                  "train_end": {
                    "componentInputParameter": "pipelineparam--train_end"
                  },
                  "train_st": {
                    "componentInputParameter": "pipelineparam--train_st"
                  }
                }
              },
              "taskInfo": {
                "name": "Add NLP embeddings and cluster"
              }
            },
            "time-series-dataset-create-3": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-time-series-dataset-create-3"
              },
              "dependentTasks": [
                "aggregate-clusters-basic"
              ],
              "inputs": {
                "parameters": {
                  "bq_source": {
                    "taskOutputParameter": {
                      "outputParameterKey": "term_cluster_agg_table",
                      "producerTask": "aggregate-clusters-basic"
                    }
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--ds_display_name_cluster"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--vertex_project"
                  }
                }
              },
              "taskInfo": {
                "name": "Aggregate basic clusters"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--budget_milli_node_hours_cluster": {
              "type": "INT"
            },
            "pipelineparam--cluster_table": {
              "type": "STRING"
            },
            "pipelineparam--cluster_table_agg_basic": {
              "type": "STRING"
            },
            "pipelineparam--context_window": {
              "type": "INT"
            },
            "pipelineparam--ds_display_name_cluster": {
              "type": "STRING"
            },
            "pipelineparam--forecast_horizon": {
              "type": "INT"
            },
            "pipelineparam--if-tbl-exists-Output": {
              "type": "STRING"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--model_name": {
              "type": "STRING"
            },
            "pipelineparam--n_clusters": {
              "type": "INT"
            },
            "pipelineparam--source_table": {
              "type": "STRING"
            },
            "pipelineparam--subcat_id": {
              "type": "INT"
            },
            "pipelineparam--target_cluster_forecast_table_basic": {
              "type": "STRING"
            },
            "pipelineparam--target_cluster_forecast_table_basic_partitioned": {
              "type": "STRING"
            },
            "pipelineparam--train_end": {
              "type": "STRING"
            },
            "pipelineparam--train_st": {
              "type": "STRING"
            },
            "pipelineparam--valid_end": {
              "type": "STRING"
            },
            "pipelineparam--valid_st": {
              "type": "STRING"
            },
            "pipelineparam--vertex_project": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-create-partitioned-forecast-table": {
        "executorLabel": "exec-create-partitioned-forecast-table",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-create-prediction-dataset-term-level": {
        "executorLabel": "exec-create-prediction-dataset-term-level",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table_uri": {
              "type": "STRING"
            },
            "subcat_id": {
              "type": "INT"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            },
            "valid_end": {
              "type": "STRING"
            },
            "valid_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "training_data_table_uri": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-create-top-mover-table": {
        "executorLabel": "exec-create-top-mover-table",
        "inputDefinitions": {
          "artifacts": {
            "trained_model": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "predict_on_dt": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "six_month_dt": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "top_n_results": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_train_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-if-tbl-exists": {
        "executorLabel": "exec-if-tbl-exists",
        "inputDefinitions": {
          "parameters": {
            "project_id": {
              "type": "STRING"
            },
            "table_ref": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-nlp-featurize-and-cluster": {
        "executorLabel": "exec-nlp-featurize-and-cluster",
        "inputDefinitions": {
          "parameters": {
            "model_name": {
              "type": "STRING"
            },
            "n_clusters": {
              "type": "INT"
            },
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "subcat_id": {
              "type": "INT"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_end": {
              "type": "STRING"
            },
            "train_st": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_cluster_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-prep-forecast-term-level": {
        "executorLabel": "exec-prep-forecast-term-level",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_train_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-prep-forecast-term-level-drop-embeddings": {
        "executorLabel": "exec-prep-forecast-term-level-drop-embeddings",
        "inputDefinitions": {
          "parameters": {
            "override": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "term_train_table": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-time-series-dataset-create": {
        "executorLabel": "exec-time-series-dataset-create",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-time-series-dataset-create-2": {
        "executorLabel": "exec-time-series-dataset-create-2",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-time-series-dataset-create-3": {
        "executorLabel": "exec-time-series-dataset-create-3",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "google.VertexDataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train-classification-model": {
        "executorLabel": "exec-train-classification-model",
        "inputDefinitions": {
          "parameters": {
            "classification_budget_hours": {
              "type": "INT"
            },
            "classification_model_name": {
              "type": "STRING"
            },
            "label_table": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "source_table": {
              "type": "STRING"
            },
            "target_table": {
              "type": "STRING"
            },
            "train_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-aggregate-clusters": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "aggregate_clusters"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef aggregate_clusters(\n    source_table: str,\n    target_table: str,\n    category_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    model_name: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_agg_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    target_bq_table = 'bq://' + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n\n\n    bq_client.query(\n      f\"\"\"\n       CREATE OR REPLACE TABLE `{target_table}` as (\n        WITH\n          scored_trends AS (\n          SELECT\n            centroid_id as topic_id,\n            terms,\n            category\n          FROM\n            {category_table} )\n        SELECT\n          SUM(score) as score,\n          date,\n          topic_id,\n          category,\n          CONCAT(category, topic_id) as series_id,\n          AVG(comments_embed.p1) AS comments_embed_p1,\n          AVG(comments_embed.p2) AS comments_embed_p2,\n          AVG(comments_embed.p3) AS comments_embed_p3,\n          AVG(comments_embed.p4) AS comments_embed_p4,\n          AVG(comments_embed.p5) AS comments_embed_p5,\n          AVG(comments_embed.p6) AS comments_embed_p6,\n          AVG(comments_embed.p7) AS comments_embed_p7,\n          AVG(comments_embed.p8) AS comments_embed_p8,\n          AVG(comments_embed.p9) AS comments_embed_p9,\n          AVG(comments_embed.p10) AS comments_embed_p10,\n          AVG(comments_embed.p11) AS comments_embed_p11,\n          AVG(comments_embed.p12) AS comments_embed_p12,\n          AVG(comments_embed.p13) AS comments_embed_p13,\n          AVG(comments_embed.p14) AS comments_embed_p14,\n          AVG(comments_embed.p15) AS comments_embed_p15,\n          AVG(comments_embed.p16) AS comments_embed_p16,\n          AVG(comments_embed.p17) AS comments_embed_p17,\n          AVG(comments_embed.p18) AS comments_embed_p18,\n          AVG(comments_embed.p19) AS comments_embed_p19,\n          AVG(comments_embed.p20) AS comments_embed_p20,\n          case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                              when date between '{valid_st}' and '{valid_end}' then 'VALIDATE'\n                             else 'TEST' end as split_col\n        FROM (\n          SELECT\n            score,\n            a.date,\n            TOPIC_ID,\n            topic_id,\n            category,\n            a.comments_embed\n          FROM\n            {source_table} a\n          INNER JOIN\n            scored_trends b\n          ON\n            a.sentences = b.terms)\n        GROUP BY\n          date,\n          topic_id,\n          category\n        )\n          \"\"\"\n    ).result()\n\n    return (\n    f'{target_bq_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-aggregate-clusters-basic": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "aggregate_clusters_basic"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef aggregate_clusters_basic(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_agg_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    target_bq_table = 'bq://' + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE {target_table} as (\n            with centroids as (select * from \n            (SELECT\n            centroid_id as topic_id, feature, numerical_value\n            FROM\n              ML.CENTROIDS(MODEL `trendspotting.embed_clustering_100`)\n            )\n            PIVOT(avg(numerical_value) for feature in ('comments_embed_p1',\n            'comments_embed_p2',\n            'comments_embed_p3',\n            'comments_embed_p4',\n            'comments_embed_p5',\n            'comments_embed_p6',\n            'comments_embed_p7',\n            'comments_embed_p8',\n            'comments_embed_p9',\n            'comments_embed_p10',\n            'comments_embed_p11',\n            'comments_embed_p12',\n            'comments_embed_p13',\n            'comments_embed_p14',\n            'comments_embed_p15',\n            'comments_embed_p16',\n            'comments_embed_p17',\n            'comments_embed_p18',\n            'comments_embed_p19',\n            'comments_embed_p20'))\n                              )\n            select score, CAST(date AS DATE) as date, b.*,\n            case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                      when date between '{valid_st}' and '{valid_end}' then 'VALIDATE'\n                     else 'TEST' end as split_col\n            from (\n                select sum(score) as score, date, topic_id \n                from {source_table} group by date, topic_id\n            ) a\n            inner join centroids b on a.topic_id = b.topic_id\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_bq_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-alter-basic-cluster-forecast-table": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "alter_basic_cluster_forecast_table"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef alter_basic_cluster_forecast_table(\n    source_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n           f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"Basic Clustering Forecast Table - this table shows a foreast for the keyword clusters generated by k-means. Note this is not using custom categories, which allow users to specify keyword categories, the algorithm is unsupervised and clusters based on NLP embeddings\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN topic_id\n    SET OPTIONS (\n      description=\"The cluster ID assigned by the BQML k-means algorithm. Note the number in the table name designates the number of term clusters\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date\n    SET OPTIONS (\n      description=\"Date for the keyword\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN predicted_on_date\n    SET OPTIONS (\n      description=\"This is an output from Vertex Forecast. When a model is created it creates scenarios to test 'what-if' on various days in the past. To understand the data, you typically pick a predict_on_date as a filter to then see what the predictions looked like as of that date\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN predicted_score\n    SET OPTIONS (\n      description=\"This is the output of Vertex Forecast. It is the predicted score over the test time period (i.e. backtest)\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN score\n    SET OPTIONS (\n      description=\"This is the actual score. Used for comparing actual vs predicted and used by Vertex AI to create predictions\"\n    )\"\"\"\n            ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-alter-basic-cluster-term-table": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "alter_basic_cluster_term_table"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef alter_basic_cluster_term_table(\n    source_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n               f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"This table contains a cross reference of the keywords and cluster IDs. Use this to explore the keywords that make up the clusters identified with BQML k-means\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN topic_id\n    SET OPTIONS (\n      description=\"Cluster ID created by BQML K-means. The number in the table name indicates how many clusters are in the table\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN NEAREST_CENTROIDS_DISTANCE\n    SET OPTIONS (\n      description=\"The closest distance shows the distance of the given row/keyword from the various cluster centers. The closest cluster gets assigned to CENTROID_ID\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN output_0\n    SET OPTIONS (\n      description=\"Vector format of the embeddings. These are transposed to the comments_embed struct so they can be read by the model. These come from tf.hub universal sentence encoder NLP model https://tfhub.dev/google/collections/universal-sentence-encoder/1\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date SET DATA TYPE DATE\n    SET OPTIONS (\n      description=\"The date corrleating to the ranked keyword\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN geo_name\n    SET OPTIONS (\n      description=\"The geographic designator for the keyword. In US, this is typically DMA, and is usually country code otherwise. Can be down to region as well\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN sentences\n    SET OPTIONS (\n      description=\"The keywords users type into google.com\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN score\n    SET OPTIONS (\n      description=\"The relative score of the keyword rank over time. This is indexed so insights are all relative to the dataset\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN comments_embed\n    SET OPTIONS (\n      description=\"See output_0. This is a transposed struct of the embedding arrays\"\n    )\"\"\",\n            ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-alter-topmover-schema": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "alter_topmover_schema"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef alter_topmover_schema(\n    source_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n        f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"Top mover table, this does a backtest by taking a snapshot of the keyword scores on the date in this table. They are then compared to predictions Vertex makes in the future date. Terms that have higher scores are than before are surfaced and sorted by the difference in score\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date\n    SET OPTIONS (\n      description=\"This is the date predicted_on is selected for the backtest. Treat all data after this date as blind and predicted by Vertex, except for the `six_mo_rank` which is actual to compare performance\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN future_date\n    SET OPTIONS (\n      description=\"This is the date in the future with respect to the backtest date. Since this is a backtest, it is in the past. In production this would be predictions into the future\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN sentences\n    SET OPTIONS (\n      description=\"The keyword a user types into google.com\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN current_rank\n    SET OPTIONS (\n      description=\"The relative score of the keyword at time of `date`\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_delta_rank\n    SET OPTIONS (\n      description=\"The difference between the `six_mo_rank` and `current_rank`\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_mo_rank\n    SET OPTIONS (\n      description=\"The actual score of the keyword forecasted at `future_date`\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_mo_forecast\n    SET OPTIONS (\n      description=\"The forecasted score from Vertex Forecast of the keyword forecasted at `future_date`\"\n    )\"\"\",\n    f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN geo_id\n    SET OPTIONS (\n      description=\"The geographic designation of the user. For US, typically this is DMA. Outside US it is either country or region\"\n    )\"\"\",\n              ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-auto-cluster": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "auto_cluster"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pandas' 'pyarrow' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef auto_cluster(\n    cluster_min: int,\n    cluster_max: int,\n    labels: list,\n    cluster_train_table: str,\n    classified_terms_table: str,\n    target_table: str,\n    project_id: str = 'cpg-cdp'\n    ) -> str:\n\n    from google.cloud import bigquery\n    import time\n\n\n    bq_client = bigquery.Client(project_id)\n\n\n    prob_pivot_sql = \"\"\n    for i, l in enumerate(labels):\n        prob_pivot_sql += (f\"(select max(probs.prob) from UNNEST(t.predicted_label_probs) probs where probs.label = '{l}') as _{i}_prob, \")\n\n    table_sql_for_clustering = f\"\"\"\n        SELECT * except(predicted_label_probs),\n        {prob_pivot_sql}\n        FROM `{classified_terms_table}` t \n        \"\"\"\n\n    kmeans_table_sql = f\"\"\"\n        create or replace table {cluster_train_table} as (\n        select distinct * EXCEPT(date, geo_id, series_id, terms, category_rank, split_col) from (\n            {table_sql_for_clustering})\n            )\n            \"\"\"\n    bq_client.query(kmeans_table_sql).result()\n\n    ## use this function to get the name of the topic in the clustering\n    def only_upper(s: str):\n        upper_chars = \"\"\n        for char in s:\n            if char.isupper():\n                upper_chars += char\n        return upper_chars\n\n        ## we use this to find where the DB index flattens for n_clusters and use that for optimal number of clusters per topic\n\n    def loop_n_clus_and_get_db_index(cluster_min: int, cluster_max: int, label: str):\n\n        label_upper = only_upper(label) #get only the upper case letters to denote the model name\n        return_data = {label: []}\n        for n_clusters in range(cluster_min, cluster_max+1):\n            print(f\"Training for {n_clusters} clusters\")\n            # return_data[label].append({'model_name': f'trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22'})\n            kmeans_sql = f\"\"\"\n            CREATE OR REPLACE MODEL trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22\n            OPTIONS(model_type='kmeans', num_clusters={n_clusters}, standardize_features = true) AS\n            select * EXCEPT(predicted_label, sentences) from `{cluster_train_table}`\n            WHERE predicted_label = '{label}'\n            \"\"\"\n            bq_client.query(kmeans_sql).result()\n            #next, get the DB index to assess the cluster quality\n            sql = f\"\"\"\n            SELECT\n              *\n            FROM\n              ML.EVALUATE (MODEL trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22)\n              \"\"\"\n            data = bq_client.query(sql).to_dataframe()\n            print(f\"DB Index: {data.davies_bouldin_index[0]}\")\n            return_data[label].append({f'trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22': data.davies_bouldin_index[0]})\n\n            time.sleep(60)\n\n        return(return_data)\n\n    data_dict = {}\n\n    #loop over labels\n    for label in labels:\n        print(f\"Tranining for label: {label}\")\n        cluster_data = loop_n_clus_and_get_db_index(cluster_min, cluster_max, label)\n        data_dict.update(cluster_data) #update with the results\n        time.sleep(60)\n\n    # find the min DB score cluster for each topic, delete the other models and then score based on topic id\n\n    optimal_models_by_label = {}\n    for label in labels:\n        prior_db=999 # set this high\n        for c in data_dict[label]:\n            optimal_model = list(data_dict[label][0].keys())[0]\n            if list(c.values())[0] < prior_db:\n                prior_db = list(c.values())[0]\n                optimal_model = list(c.keys())[0] \n                print(optimal_model)\n            optimal_models_by_label.update({label: optimal_model})\n    print(f\"Optimal models found: {optimal_models_by_label}\")\n\n    # save optimal model dictionary to gcs\n    from google.cloud import storage\n\n    import pickle\n\n    with open('./optimal_models.dict', 'wb') as file:\n        pickle.dump(optimal_models_by_label, file)\n\n    bucket_name = 'trendspotting-pipeline'\n\n    storage_client = storage.Client(project=project_id)\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob('optimal_models.dict')\n\n    blob.upload_from_filename('optimal_models.dict')\n\n    print(\"Deleting sub optimal models\")\n\n    #delete the sub-optimal models\n    def delete_model_sql(model_name):\n        return f\"DROP MODEL IF EXISTS {model_name}\"\n\n    for label in labels:\n        optimal_model_for_label = optimal_models_by_label[label]\n        for c in data_dict[label]:\n            if list(c.keys())[0] != optimal_model_for_label:\n                sub_optimal_model = list(c.keys())[0]\n                bq_client.query(delete_model_sql(sub_optimal_model)).result() #clean up the models\n                time.sleep(5)\n\n   #last, score using a union query for each label\n\n    def score_cluster(label, model_name):\n        predict_sql = f\"\"\"\n                SELECT\n                  *\n                FROM\n                  ML.PREDICT (MODEL {model_name},\n                  (SELECT * EXCEPT(predicted_label, sentences), \n                  sentences as terms, \n                  predicted_label as category\n                  from `{cluster_train_table}`\n                  where predicted_label = '{label}'))\n                  \"\"\"\n        return(predict_sql)\n\n    predict_sql = \"\"\n    for i, label in enumerate(labels):\n        predict_sql += score_cluster(label, optimal_models_by_label[label])\n        if len(labels)-1 == i:\n            break\n        else:\n            predict_sql += \"\"\"\n            UNION ALL\n            \"\"\"\n\n    def score_table(predict_sql, tt=target_table):\n        return(f\"CREATE OR REPLACE TABLE `{tt}` AS ({predict_sql})\")\n\n    segment_score_sql = score_table(predict_sql)\n\n    bq_client.query(segment_score_sql).result()\n\n    return(target_table)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-automl-forecasting-training-job": {
          "container": {
            "args": [
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.target_column",
              "{{$.inputs.parameters['target_column']}}",
              "--method.time_column",
              "{{$.inputs.parameters['time_column']}}",
              "--method.time_series_identifier_column",
              "{{$.inputs.parameters['time_series_identifier_column']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.data_granularity_unit",
              "{{$.inputs.parameters['data_granularity_unit']}}",
              "--method.data_granularity_count",
              "{{$.inputs.parameters['data_granularity_count']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--init.optimization_objective",
              "{{$.inputs.parameters['optimization_objective']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--method.model_display_name",
              "{{$.inputs.parameters['model_display_name']}}",
              "--method.predefined_split_column_name",
              "{{$.inputs.parameters['predefined_split_column_name']}}",
              "--method.export_evaluated_data_items",
              "{{$.inputs.parameters['export_evaluated_data_items']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}",
              "--method.export_evaluated_data_items_override_destination",
              "{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--init.labels",
              "{{$.inputs.parameters['labels']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-automl-forecasting-training-job-2": {
          "container": {
            "args": [
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.target_column",
              "{{$.inputs.parameters['target_column']}}",
              "--method.time_column",
              "{{$.inputs.parameters['time_column']}}",
              "--method.time_series_identifier_column",
              "{{$.inputs.parameters['time_series_identifier_column']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.data_granularity_unit",
              "{{$.inputs.parameters['data_granularity_unit']}}",
              "--method.data_granularity_count",
              "{{$.inputs.parameters['data_granularity_count']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--init.optimization_objective",
              "{{$.inputs.parameters['optimization_objective']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--method.model_display_name",
              "{{$.inputs.parameters['model_display_name']}}",
              "--method.predefined_split_column_name",
              "{{$.inputs.parameters['predefined_split_column_name']}}",
              "--method.export_evaluated_data_items",
              "{{$.inputs.parameters['export_evaluated_data_items']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}",
              "--method.export_evaluated_data_items_override_destination",
              "{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--init.labels",
              "{{$.inputs.parameters['labels']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-automl-forecasting-training-job-3": {
          "container": {
            "args": [
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.target_column",
              "{{$.inputs.parameters['target_column']}}",
              "--method.time_column",
              "{{$.inputs.parameters['time_column']}}",
              "--method.time_series_identifier_column",
              "{{$.inputs.parameters['time_series_identifier_column']}}",
              "--method.unavailable_at_forecast_columns",
              "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
              "--method.available_at_forecast_columns",
              "{{$.inputs.parameters['available_at_forecast_columns']}}",
              "--method.forecast_horizon",
              "{{$.inputs.parameters['forecast_horizon']}}",
              "--method.data_granularity_unit",
              "{{$.inputs.parameters['data_granularity_unit']}}",
              "--method.data_granularity_count",
              "{{$.inputs.parameters['data_granularity_count']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
              "--init.optimization_objective",
              "{{$.inputs.parameters['optimization_objective']}}",
              "--method.context_window",
              "{{$.inputs.parameters['context_window']}}",
              "--method.budget_milli_node_hours",
              "{{$.inputs.parameters['budget_milli_node_hours']}}",
              "--method.model_display_name",
              "{{$.inputs.parameters['model_display_name']}}",
              "--method.predefined_split_column_name",
              "{{$.inputs.parameters['predefined_split_column_name']}}",
              "--method.export_evaluated_data_items",
              "{{$.inputs.parameters['export_evaluated_data_items']}}",
              "--method.export_evaluated_data_items_bigquery_destination_uri",
              "{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}",
              "--method.export_evaluated_data_items_override_destination",
              "{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}",
              "--method.time_series_attribute_columns",
              "{{$.inputs.parameters['time_series_attribute_columns']}}",
              "--init.labels",
              "{{$.inputs.parameters['labels']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLForecastingTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-bigquery-create-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryCreateModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query\": \"{{$.inputs.parameters['query']}}\", \"query_parameters\": {{$.inputs.parameters['query_parameters']}}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-create-partitioned-forecast-table": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "create_partitioned_forecast_table"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_partitioned_forecast_table(\n    source_table: str,\n    target_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> None:\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n\n    query = f\"\"\"CREATE OR REPLACE TABLE `{target_table}`  \n                PARTITION BY date\n                as\n                (\n               SELECT CAST(date AS DATE) as date,\n               CAST(predicted_on_date AS DATE) as predicted_on_date,\n               predicted_score,\n               score,\n               CAST(topic_id as INT64) as topic_id\n               from `{source_table}`)\n               \"\"\"\n    bq_client.query(query).result()\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-create-prediction-dataset-term-level": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "create_prediction_dataset_term_level"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_prediction_dataset_term_level(\n      target_table: str,\n      source_table_uri: str,\n      train_st: str,\n      train_end: str,\n      valid_st: str,\n      valid_end: str,\n      subcat_id: int,\n      override: str = 'False',\n      project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('training_data_table_uri', str)]):\n\n    from google.cloud import bigquery\n\n    override = bool(override)\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n        RETURNS \n        STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n               p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n               p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n               p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n               p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n        AS (\n        STRUCT(\n            arr[OFFSET(0)]\n            , arr[OFFSET(1)]\n            , arr[OFFSET(2)]\n            , arr[OFFSET(3)]\n            , arr[OFFSET(4)]\n            , arr[OFFSET(5)]\n            , arr[OFFSET(6)]\n            , arr[OFFSET(7)]\n            , arr[OFFSET(8)]\n            , arr[OFFSET(9)]\n            , arr[OFFSET(10)]\n            , arr[OFFSET(11)]\n            , arr[OFFSET(12)]\n            , arr[OFFSET(13)]\n            , arr[OFFSET(14)]\n            , arr[OFFSET(15)]\n            , arr[OFFSET(16)]\n            , arr[OFFSET(17)]\n            , arr[OFFSET(18)]\n            , arr[OFFSET(19)]    \n        ));\n\n\n        CREATE OR REPLACE TABLE `{target_table}` as (\n            SELECT * except(output_0), case when date between \"{train_st}\" and \"{train_end}\" then 'TRAIN'\n                  when date between \"{valid_st}\" and \"{valid_end}\" then 'VALIDATE'\n                 else 'TEST' end as split_col,\n            arr_to_input_20(output_0) as embed\n        FROM ML.PREDICT(MODEL trendspotting.swivel_text_embed,\n        (\n          SELECT date, geo_id, term AS sentences, score, concat( term, geo_id) as series_id\n          FROM `{source_table_uri}` where category_id = {subcat_id} and date > \"{train_st}\"\n        ))      \n        )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-create-top-mover-table": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "create_top_mover_table"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_top_mover_table(\n    source_table: str,\n    target_table: str,\n    predict_on_dt: str, #uses the last validation date,\n    six_month_dt: str,\n    trained_model: Input[Artifact],\n    top_n_results: int,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_train_table', str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n    select * from\n      (with six_mo_val as (select *, predicted_score.value as six_mo_forecast from `{source_table_no_bq}` \n        where predicted_on_date = '{predict_on_dt}' and date = '{six_month_dt}')\n       SELECT \n       cast(a.date AS DATE) as date,\n       cast(b.date AS DATE) as future_date,\n       a.geo_id, \n       TRIM(a.series_id, a.geo_id) as sentences, \n       a.score as current_rank, \n       a.score - b.six_mo_forecast as six_delta_rank,\n       b.score as six_mo_rank, \n       six_mo_forecast\n      FROM `{source_table_no_bq}` a INNER JOIN \n       six_mo_val b on a.series_id = b.series_id \n      WHERE a.date = '{predict_on_dt}' and a.predicted_on_date = '{predict_on_dt}'\n      ) where  current_rank < six_mo_rank order by six_delta_rank desc limit {top_n_results} \n)\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-if-tbl-exists": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "if_tbl_exists"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef if_tbl_exists(table_ref: str, project_id: str) -> str:\n    from google.cloud import bigquery\n    bq_client = bigquery.Client(project_id)\n    from google.cloud.exceptions import NotFound\n    try:\n        bq_client.get_table(table_ref)\n        return \"True\"\n    except NotFound:\n        return \"False\"\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-nlp-featurize-and-cluster": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "nlp_featurize_and_cluster"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef nlp_featurize_and_cluster(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    subcat_id: int,\n    model_name: str,\n    n_clusters: int,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_cluster_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n            RETURNS \n            STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                   p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                   p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                   p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                   p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n            AS (\n            STRUCT(\n                arr[OFFSET(0)]\n                , arr[OFFSET(1)]\n                , arr[OFFSET(2)]\n                , arr[OFFSET(3)]\n                , arr[OFFSET(4)]\n                , arr[OFFSET(5)]\n                , arr[OFFSET(6)]\n                , arr[OFFSET(7)]\n                , arr[OFFSET(8)]\n                , arr[OFFSET(9)]\n                , arr[OFFSET(10)]\n                , arr[OFFSET(11)]\n                , arr[OFFSET(12)]\n                , arr[OFFSET(13)]\n                , arr[OFFSET(14)]\n                , arr[OFFSET(15)]\n                , arr[OFFSET(16)]\n                , arr[OFFSET(17)]\n                , arr[OFFSET(18)]\n                , arr[OFFSET(19)]    \n            ));\n\n            CREATE OR REPLACE TABLE `{target_table}` \n            PARTITION BY RANGE_BUCKET(TOPIC_ID, GENERATE_ARRAY(0, {n_clusters}+1, 1)) \n            as ( \n                select * except(CENTROID_ID), CENTROID_ID as TOPIC_ID\n                from ML.PREDICT(MODEL `{model_name}`, (\n                    select *, arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT cast(date AS DATE) as date, geo_name, term AS sentences, score\n                      FROM `{source_table}`\n                      WHERE date >= '{train_st}'\n                      and category_id = {subcat_id}\n                    ))\n                    )\n                )\n            )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-prep-forecast-term-level": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "prep_forecast_term_level"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef prep_forecast_term_level(\n    source_table: str,\n    target_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_train_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    source_table_no_bq = source_table.strip('bq://')\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n        SELECT * except(embed), \n        embed.p1 as emb1, \n        embed.p2 as emb2,\n        embed.p3 as emb3,\n        embed.p4 as emb4,\n        embed.p5 as emb5,\n        embed.p6 as emb6,\n        embed.p7 as emb7,\n        embed.p8 as emb8,\n        embed.p9 as emb9,\n        embed.p10 as emb10,\n        embed.p11 as emb11,\n        embed.p12 as emb12,\n        embed.p13 as emb13,\n        embed.p14 as emb14,\n        embed.p15 as emb15,\n        embed.p16 as emb16,\n        embed.p17 as emb17,\n        embed.p18 as emb18,\n        embed.p19 as emb19,\n        embed.p20 as emb20\n\n        FROM `{source_table_no_bq}` )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'bq://{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-prep-forecast-term-level-drop-embeddings": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "prep_forecast_term_level_drop_embeddings"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef prep_forecast_term_level_drop_embeddings(\n    source_table: str,\n    target_table: str,\n    override: str = 'False',\n    project_id: str = 'cpg-cdp'\n    ) -> NamedTuple('Outputs', [('term_train_table', str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n\n    source_table_no_bq = str(source_table).strip('bq://')\n\n    (\n    bq_client.query(\n      f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n        SELECT * \n        except(\n        emb1, \n        emb2,\n        emb3,\n        emb4,\n        emb5,\n        emb6,\n        emb7,\n        emb8,\n        emb9,\n        emb10,\n        emb11,\n        emb12,\n        emb13,\n        emb14,\n        emb15,\n        emb16,\n        emb17,\n        emb18,\n        emb19,\n        emb20)\n\n        FROM `{source_table_no_bq}` )\n          \"\"\"\n    )\n    .result()\n    )\n\n    return (\n    f'bq://{target_table}',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-time-series-dataset-create": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-time-series-dataset-create-2": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-time-series-dataset-create-3": {
          "container": {
            "args": [
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.location",
              "{{$.inputs.parameters['location']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}",
              "--method.labels",
              "{{$.inputs.parameters['labels']}}",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "TimeSeriesDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.5"
          }
        },
        "exec-train-classification-model": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train_classification_model"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train_classification_model(\n      target_table: str,\n      source_table: str,\n      label_table: str,\n      train_table: str,\n      classification_model_name: str,\n      classification_budget_hours: int,\n      project_id: str = 'cpg-cdp'\n    ) -> str:\n\n    from google.cloud import bigquery\n    bq_client = bigquery.Client(project_id)\n\n    source_table_no_bq = source_table.strip('bq://')\n\n    sql = f\"\"\" CREATE OR REPLACE TABLE\n      {train_table} AS (\n      with distinct_data as (\n      SELECT DISTINCT\n        * EXCEPT(category_rank, series_id, date)\n      FROM\n        `{source_table_no_bq}` a\n      INNER JOIN\n        `{label_table}` b\n      ON\n        a.sentences = b.terms )\n      select distinct *,\n      case when rand() > 0.9 then 'VALIDATE' when rand() > 0.8 then 'TEST' else 'TRAIN' end as dataframe\n      from distinct_data \n      WHERE label is not null\n        )\n    \"\"\"\n\n    bq_client.query(sql).result()\n    print(\"Training dataset for classification complete\")\n\n    model_sql = f\"\"\"CREATE OR REPLACE MODEL\n      {classification_model_name}\n    OPTIONS\n      ( model_type='AUTOML_CLASSIFIER',\n        BUDGET_HOURS={classification_budget_hours},\n        input_label_cols=['label']\n      ) AS\n    SELECT\n      * EXCEPT(dataframe, count)\n    FROM\n     `{train_table}`\n    WHERE\n      dataframe = 'TRAIN'\"\"\"\n\n    bq_client.query(model_sql).result()\n\n\n    print(\"Training for classification complete\")\n    score_table_sql = f\"\"\"CREATE OR REPLACE TABLE {target_table} as (\n    SELECT\n      *\n    FROM\n      ML.PREDICT (MODEL {classification_model_name},\n        (\n        SELECT\n          *,\n            sentences as terms\n        FROM\n           `{source_table_no_bq}`\n         )\n      )\n    )\"\"\"\n\n    bq_client.query(score_table_sql).result()\n    print(\"Scoring for classification complete\")\n\n    return(target_table)\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "cusines-thailand-trendspotting-pipeline-v6"
    },
    "root": {
      "dag": {
        "tasks": {
          "alter-topmover-schema": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-alter-topmover-schema"
            },
            "dependentTasks": [
              "create-top-mover-table"
            ],
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "componentInputParameter": "top_movers_target_table"
                }
              }
            },
            "taskInfo": {
              "name": "Adding descriptions to the output table"
            }
          },
          "automl-forecasting-training-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automl-forecasting-training-job"
            },
            "dependentTasks": [
              "time-series-dataset-create"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"date\"]"
                    }
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "budget_milli_node_hours"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"timestamp\": {\"columnName\": \"date\"}}, {\"categorical\": {\"columnName\": \"geo_id\"}}, {\"numeric\": {\"columnName\": \"score\"}}]"
                    }
                  }
                },
                "context_window": {
                  "componentInputParameter": "context_window"
                },
                "data_granularity_count": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "data_granularity_unit": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "day"
                    }
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "train-point-forecast-futurama"
                    }
                  }
                },
                "export_evaluated_data_items": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "target_term_forecast_table"
                },
                "export_evaluated_data_items_override_destination": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1"
                    }
                  }
                },
                "forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "model_display_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "point-forecast-futurama"
                    }
                  }
                },
                "optimization_objective": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "minimize-rmse"
                    }
                  }
                },
                "predefined_split_column_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "split_col"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                },
                "target_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "score"
                    }
                  }
                },
                "time_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "date"
                    }
                  }
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"geo_name\", \"geo_id\", \"category_id\", \"term\"]"
                    }
                  }
                },
                "time_series_identifier_column": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "series_id"
                    }
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"score\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Forecast term-level"
            }
          },
          "condition-1": {
            "componentRef": {
              "name": "comp-condition-1"
            },
            "dependentTasks": [
              "if-tbl-exists",
              "prep-forecast-term-level"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--auto_cluster_target_table": {
                  "componentInputParameter": "auto_cluster_target_table"
                },
                "pipelineparam--auto_cluster_train_table": {
                  "componentInputParameter": "auto_cluster_train_table"
                },
                "pipelineparam--auto_max_cluster": {
                  "componentInputParameter": "auto_max_cluster"
                },
                "pipelineparam--auto_min_cluster": {
                  "componentInputParameter": "auto_min_cluster"
                },
                "pipelineparam--budget_milli_node_hours_cluster": {
                  "componentInputParameter": "budget_milli_node_hours_cluster"
                },
                "pipelineparam--classification_model_budget": {
                  "componentInputParameter": "classification_model_budget"
                },
                "pipelineparam--classification_model_name": {
                  "componentInputParameter": "classification_model_name"
                },
                "pipelineparam--classification_train_table": {
                  "componentInputParameter": "classification_train_table"
                },
                "pipelineparam--cluster_table": {
                  "componentInputParameter": "cluster_table"
                },
                "pipelineparam--cluster_table_agg": {
                  "componentInputParameter": "cluster_table_agg"
                },
                "pipelineparam--context_window": {
                  "componentInputParameter": "context_window"
                },
                "pipelineparam--ds_display_name_cluster": {
                  "componentInputParameter": "ds_display_name_cluster"
                },
                "pipelineparam--forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "pipelineparam--if-tbl-exists-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "if-tbl-exists"
                  }
                },
                "pipelineparam--label_list": {
                  "componentInputParameter": "label_list"
                },
                "pipelineparam--label_table": {
                  "componentInputParameter": "label_table"
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--model_name": {
                  "componentInputParameter": "model_name"
                },
                "pipelineparam--prep-forecast-term-level-term_train_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_train_table",
                    "producerTask": "prep-forecast-term-level"
                  }
                },
                "pipelineparam--scored_classification_table": {
                  "componentInputParameter": "scored_classification_table"
                },
                "pipelineparam--target_cluster_forecast_table": {
                  "componentInputParameter": "target_cluster_forecast_table"
                },
                "pipelineparam--train_end": {
                  "componentInputParameter": "train_end"
                },
                "pipelineparam--train_st": {
                  "componentInputParameter": "train_st"
                },
                "pipelineparam--valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "pipelineparam--valid_st": {
                  "componentInputParameter": "valid_st"
                },
                "pipelineparam--vertex_project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "condition-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--if-tbl-exists-Output'].string_value == 'True'"
            }
          },
          "condition-2": {
            "componentRef": {
              "name": "comp-condition-2"
            },
            "dependentTasks": [
              "if-tbl-exists"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--budget_milli_node_hours_cluster": {
                  "componentInputParameter": "budget_milli_node_hours_cluster"
                },
                "pipelineparam--cluster_table": {
                  "componentInputParameter": "cluster_table"
                },
                "pipelineparam--cluster_table_agg_basic": {
                  "componentInputParameter": "cluster_table_agg_basic"
                },
                "pipelineparam--context_window": {
                  "componentInputParameter": "context_window"
                },
                "pipelineparam--ds_display_name_cluster": {
                  "componentInputParameter": "ds_display_name_cluster"
                },
                "pipelineparam--forecast_horizon": {
                  "componentInputParameter": "forecast_horizon"
                },
                "pipelineparam--if-tbl-exists-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "if-tbl-exists"
                  }
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--model_name": {
                  "componentInputParameter": "model_name"
                },
                "pipelineparam--n_clusters": {
                  "componentInputParameter": "n_clusters"
                },
                "pipelineparam--source_table": {
                  "componentInputParameter": "source_table"
                },
                "pipelineparam--subcat_id": {
                  "componentInputParameter": "subcat_id"
                },
                "pipelineparam--target_cluster_forecast_table_basic": {
                  "componentInputParameter": "target_cluster_forecast_table_basic"
                },
                "pipelineparam--target_cluster_forecast_table_basic_partitioned": {
                  "componentInputParameter": "target_cluster_forecast_table_basic_partitioned"
                },
                "pipelineparam--train_end": {
                  "componentInputParameter": "train_end"
                },
                "pipelineparam--train_st": {
                  "componentInputParameter": "train_st"
                },
                "pipelineparam--valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "pipelineparam--valid_st": {
                  "componentInputParameter": "valid_st"
                },
                "pipelineparam--vertex_project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "condition-2"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--if-tbl-exists-Output'].string_value == 'False'"
            }
          },
          "create-prediction-dataset-term-level": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-create-prediction-dataset-term-level"
            },
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "pipelineparam--vertex_project": {
                  "componentInputParameter": "vertex_project"
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table_uri": {
                  "componentInputParameter": "source_table"
                },
                "subcat_id": {
                  "componentInputParameter": "subcat_id"
                },
                "target_table": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{{$.inputs.parameters['pipelineparam--vertex_project']}}.trends_pipeline.ETL_futurama_weekly_embed_cusines-thailand"
                    }
                  }
                },
                "train_end": {
                  "componentInputParameter": "train_end"
                },
                "train_st": {
                  "componentInputParameter": "train_st"
                },
                "valid_end": {
                  "componentInputParameter": "valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "Add embeddings and split data"
            }
          },
          "create-top-mover-table": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-create-top-mover-table"
            },
            "dependentTasks": [
              "automl-forecasting-training-job"
            ],
            "inputs": {
              "artifacts": {
                "trained_model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "automl-forecasting-training-job"
                  }
                }
              },
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "predict_on_dt": {
                  "componentInputParameter": "predict_on_dt"
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "six_month_dt": {
                  "componentInputParameter": "six_month_dt"
                },
                "source_table": {
                  "componentInputParameter": "target_term_forecast_table"
                },
                "target_table": {
                  "componentInputParameter": "top_movers_target_table"
                },
                "top_n_results": {
                  "componentInputParameter": "top_n_results"
                }
              }
            },
            "taskInfo": {
              "name": "Generate the top mover table"
            }
          },
          "if-tbl-exists": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-if-tbl-exists"
            },
            "inputs": {
              "parameters": {
                "project_id": {
                  "componentInputParameter": "vertex_project"
                },
                "table_ref": {
                  "componentInputParameter": "label_table"
                }
              }
            },
            "taskInfo": {
              "name": "if-tbl-exists"
            }
          },
          "prep-forecast-term-level": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-prep-forecast-term-level"
            },
            "dependentTasks": [
              "create-prediction-dataset-term-level"
            ],
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "training_data_table_uri",
                    "producerTask": "create-prediction-dataset-term-level"
                  }
                },
                "target_table": {
                  "componentInputParameter": "fix_embed_target"
                }
              }
            },
            "taskInfo": {
              "name": "Prep Data For Training"
            }
          },
          "prep-forecast-term-level-drop-embeddings": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-prep-forecast-term-level-drop-embeddings"
            },
            "dependentTasks": [
              "prep-forecast-term-level"
            ],
            "inputs": {
              "parameters": {
                "override": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "False"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "cpg-cdp"
                    }
                  }
                },
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_train_table",
                    "producerTask": "prep-forecast-term-level"
                  }
                },
                "target_table": {
                  "componentInputParameter": "drop_embed_target"
                }
              }
            },
            "taskInfo": {
              "name": "Dropping embeddings for point level forecasting"
            }
          },
          "time-series-dataset-create": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create"
            },
            "dependentTasks": [
              "prep-forecast-term-level-drop-embeddings"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_train_table",
                    "producerTask": "prep-forecast-term-level-drop-embeddings"
                  }
                },
                "display_name": {
                  "componentInputParameter": "ds_display_name_terms"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "Prep data for training"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "auto_cluster_target_table": {
            "type": "STRING"
          },
          "auto_cluster_train_table": {
            "type": "STRING"
          },
          "auto_max_cluster": {
            "type": "INT"
          },
          "auto_min_cluster": {
            "type": "INT"
          },
          "budget_milli_node_hours": {
            "type": "INT"
          },
          "budget_milli_node_hours_cluster": {
            "type": "INT"
          },
          "classification_model_budget": {
            "type": "INT"
          },
          "classification_model_name": {
            "type": "STRING"
          },
          "classification_train_table": {
            "type": "STRING"
          },
          "cluster_table": {
            "type": "STRING"
          },
          "cluster_table_agg": {
            "type": "STRING"
          },
          "cluster_table_agg_basic": {
            "type": "STRING"
          },
          "context_window": {
            "type": "INT"
          },
          "drop_embed_target": {
            "type": "STRING"
          },
          "ds_display_name_cluster": {
            "type": "STRING"
          },
          "ds_display_name_terms": {
            "type": "STRING"
          },
          "fix_embed_target": {
            "type": "STRING"
          },
          "forecast_horizon": {
            "type": "INT"
          },
          "k_means_name": {
            "type": "STRING"
          },
          "label_list": {
            "type": "STRING"
          },
          "label_table": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "model_name": {
            "type": "STRING"
          },
          "n_clusters": {
            "type": "INT"
          },
          "override": {
            "type": "STRING"
          },
          "predict_on_dt": {
            "type": "STRING"
          },
          "scored_classification_table": {
            "type": "STRING"
          },
          "six_month_dt": {
            "type": "STRING"
          },
          "source_table": {
            "type": "STRING"
          },
          "subcat_id": {
            "type": "INT"
          },
          "target_cluster_forecast_table": {
            "type": "STRING"
          },
          "target_cluster_forecast_table_basic": {
            "type": "STRING"
          },
          "target_cluster_forecast_table_basic_partitioned": {
            "type": "STRING"
          },
          "target_term_forecast_table": {
            "type": "STRING"
          },
          "top_movers_target_table": {
            "type": "STRING"
          },
          "top_n_results": {
            "type": "INT"
          },
          "train_end": {
            "type": "STRING"
          },
          "train_st": {
            "type": "STRING"
          },
          "valid_end": {
            "type": "STRING"
          },
          "valid_st": {
            "type": "STRING"
          },
          "version": {
            "type": "STRING"
          },
          "vertex_project": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.12"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://trendspotting-pipeline"
  }
}