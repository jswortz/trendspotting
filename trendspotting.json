{
  "components": {
    "comp-aggregate-clusters": {
      "executorLabel": "exec-aggregate-clusters",
      "inputDefinitions": {
        "parameters": {
          "category_table": {
            "parameterType": "STRING"
          },
          "model_name": {
            "parameterType": "STRING"
          },
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "train_end": {
            "parameterType": "STRING"
          },
          "train_st": {
            "parameterType": "STRING"
          },
          "valid_end": {
            "parameterType": "STRING"
          },
          "valid_st": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "term_cluster_agg_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-aggregate-clusters-basic": {
      "executorLabel": "exec-aggregate-clusters-basic",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "train_end": {
            "parameterType": "STRING"
          },
          "train_st": {
            "parameterType": "STRING"
          },
          "valid_end": {
            "parameterType": "STRING"
          },
          "valid_st": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "term_cluster_agg_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-alter-basic-cluster-forecast-table": {
      "executorLabel": "exec-alter-basic-cluster-forecast-table",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-alter-basic-cluster-term-table": {
      "executorLabel": "exec-alter-basic-cluster-term-table",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-alter-topmover-schema": {
      "executorLabel": "exec-alter-topmover-schema",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-auto-cluster": {
      "executorLabel": "exec-auto-cluster",
      "inputDefinitions": {
        "parameters": {
          "classified_terms_table": {
            "parameterType": "STRING"
          },
          "cluster_max": {
            "parameterType": "NUMBER_INTEGER"
          },
          "cluster_min": {
            "parameterType": "NUMBER_INTEGER"
          },
          "cluster_train_table": {
            "parameterType": "STRING"
          },
          "labels": {
            "parameterType": "LIST"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-automl-forecasting-training-job": {
      "executorLabel": "exec-automl-forecasting-training-job",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "The dataset within the same Project from which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's [training_task_definition] [google.cloud.aiplatform.v1beta1.TrainingPipeline.training_task_definition]. For time series Datasets, all their data is exported to training, to pick and choose from."
          }
        },
        "parameters": {
          "additional_experiments": {
            "description": "Additional experiment flags for the time series forcasting training.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "available_at_forecast_columns": {
            "description": "Column names of columns that are available at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is known at forecast.",
            "parameterType": "LIST"
          },
          "budget_milli_node_hours": {
            "description": "The train budget of creating this Model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a Model for the given training set, the training won't be attempted and will error. The minimum value is 1000 and the maximum is 72000.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "column_specs": {
            "description": "Alternative to column_transformations where the keys of the dict are column names and their respective values are one of AutoMLTabularTrainingJob.column_data_types. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "column_transformations": {
            "description": "Transformations to apply to the input columns (i.e. columns other than the targetColumn). Each transformation may produce multiple result values from the column's value, and all are used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed. Consider using column_specs as column_transformations will be deprecated eventually.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "context_window": {
            "description": "The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] fields. When not provided uses the default value of 0 which means the model sets each series context window to be 0 (also known as \"cold start\"). Inclusive.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_count": {
            "description": "The number of data granularity units between data points in the training data. If [data_granularity_unit] is `minute`, can be 1, 5, 10, 15, or 30. For all other values of [data_granularity_unit], must be 1.",
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_unit": {
            "description": "The data granularity unit. Accepted values are `minute`, `hour`, `day`, `week`, `month`, `year`.",
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of this TrainingPipeline.",
            "parameterType": "STRING"
          },
          "export_evaluated_data_items": {
            "defaultValue": false,
            "description": "Whether to export the test set predictions to a BigQuery table. If False, then the export is not performed.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "export_evaluated_data_items_bigquery_destination_uri": {
            "description": "URI of desired destination BigQuery table for exported test set predictions. Expected format: `bq://<project_id>:<dataset_id>:<table>` If not specified, then results are exported to the following auto-created BigQuery table: `<project_id>:export_evaluated_examples_<model_name>_<yyyy_MM_dd'T'HH_mm_ss_SSS'Z'>.evaluated_examples` Applies only if [export_evaluated_data_items] is True.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "export_evaluated_data_items_override_destination": {
            "description": "Whether to override the contents of [export_evaluated_data_items_bigquery_destination_uri], if the table exists, for exported test set predictions. If False, and the table exists, then the training job will fail. Applies only if [export_evaluated_data_items] is True and [export_evaluated_data_items_bigquery_destination_uri] is specified.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "forecast_horizon": {
            "description": "The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] field. Inclusive.",
            "parameterType": "NUMBER_INTEGER"
          },
          "hierarchy_group_columns": {
            "description": "A list of time series attribute column names that define the time series hierarchy. Only one level of hierarchy is supported, ex. `region` for a hierarchy of stores or `department` for a hierarchy of products. If multiple columns are specified, time series will be grouped by their combined values, ex. (`blue`, `large`) for `color` and `size`, up to 5 columns are accepted. If no group columns are specified, all time series are considered to be part of the same group.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "hierarchy_group_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over both the horizon and time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_group_total_weight": {
            "description": "The weight of the loss for predictions aggregated over time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over the horizon for a single time series.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "holiday_regions": {
            "description": "The geographical regions to use when creating holiday features. This option is only allowed when data_granularity_unit is `day`. Acceptable values can come from any of the following levels:\nTop level: GLOBAL Second level: continental regions\nNA: North America\nJAPAC: Japan and Asia Pacific\nEMEA: Europe, the Middle East and Africa\nLAC: Latin America and the Caribbean Third level: countries from ISO 3166-1 Country codes.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "is_default_version": {
            "description": "When set to True, the newly uploaded model version will automatically have alias \"default\" included. Subsequent uses of the model produced by this job without a version specified will use this \"default\" version. When set to False, the \"default\" alias will not be moved. Actions targeting the model version produced by this job will need to specifically reference this version by ID or alias. New model uploads, i.e. version 1, will always be \"default\" aliased.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "labels": {
            "defaultValue": {},
            "description": "The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_display_name": {
            "description": "If the script produces a managed Vertex AI Model. The display name of the Model. The name can be up to 128 characters long and can be consist of any UTF-8 characters. If not provided upon creation, the job's display_name is used.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the model. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, the trained Model will be secured by this key. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "description": "The ID to use for the Model produced by this job, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_labels": {
            "description": "The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "model_version_aliases": {
            "description": "User provided version aliases so that the model version uploaded by this job can be referenced via alias instead of auto-generated version ID. A default version alias will be created for the first version of the model. The format is [a-z][a-zA-Z0-9-]{0,126}[a-z0-9]",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "model_version_description": {
            "description": "The description of the model version being uploaded by this job.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "optimization_objective": {
            "description": "Objective function the model is to be optimized towards. The training process creates a Model that optimizes the value of the objective function over the validation set. The supported optimization objectives: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). \"minimize-quantile-loss\" - Minimize the quantile loss at the defined quantiles. (Set this objective to build quantile forecasts.)",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "parent_model": {
            "description": "The resource name or model ID of an existing model. The new model uploaded by this job will be a version of `parent_model`. Only set this field when training a new version of an existing model.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predefined_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {`TRAIN`, `VALIDATE`, `TEST`}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "description": "Project to retrieve dataset from.",
            "parameterType": "STRING"
          },
          "quantiles": {
            "description": "Quantiles to use for the `minimize-quantile-loss` [AutoMLForecastingTrainingJob.optimization_objective]. This argument is required in this case. Accepts up to 5 quantiles in the form of a double from 0 to 1, exclusive. Each quantile must be unique.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "target_column": {
            "description": "Name of the column that the Model is to predict values for. This column must be unavailable at forecast.",
            "parameterType": "STRING"
          },
          "test_fraction_split": {
            "description": "The fraction of the input data that is to be used to evaluate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "time_column": {
            "description": "Name of the column that identifies time order in the time series. This column must be available at forecast.",
            "parameterType": "STRING"
          },
          "time_series_attribute_columns": {
            "description": "Column names that should be used as attribute columns. Each column is constant within a time series.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "time_series_identifier_column": {
            "description": "Name of the column that identifies the time series.",
            "parameterType": "STRING"
          },
          "timestamp_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key values of the key (the values in the column) must be in RFC 3339 `date-time` format, where `time-offset` = `\"Z\"` (e.g. 1985-04-12T23:20:50.52Z). If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets. This parameter must be used with training_fraction_split, validation_fraction_split, and test_fraction_split.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the training pipeline. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if `model_to_upload` is not set separately. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_fraction_split": {
            "description": "The fraction of the input data that is to be used to train the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "unavailable_at_forecast_columns": {
            "description": "Column names of columns that are unavailable at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is unknown before the forecast (e.g. population of a city in a given year, or weather on a given day).",
            "parameterType": "LIST"
          },
          "validation_fraction_split": {
            "description": "The fraction of the input data that is to be used to validate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "validation_options": {
            "description": "Validation options for the data validation component. The available options are: \"fail-pipeline\" - (default), will validate against the validation and fail the pipeline if it fails. \"ignore-validation\" - ignore the results of the validation and continue the pipeline",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "weight_column": {
            "description": "Name of the column that should be used as the weight column. Higher values in this column give more importance to the row during Model training. The column must have numeric values between 0 and 10000 inclusively, and 0 value means that the row is ignored. If the weight column field is not set, then all rows are assumed to have equal weight of 1.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_column": {
            "description": "Name of the column that should be used to filter input rows. The column should contain either booleans or string booleans; if the value of the row is True, generate a sliding window from that row.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_max_count": {
            "description": "Number of rows that should be used to generate input examples. If the total row count is larger than this number, the input data will be randomly sampled to hit the count.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "window_stride_length": {
            "description": "Step length used to generate input examples. Every `window_stride_length` rows will be used to generate a sliding window.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "google.VertexModel",
              "schemaVersion": "0.0.1"
            },
            "description": "The trained Vertex AI Model resource or None if training did not produce a Vertex AI Model."
          }
        }
      }
    },
    "comp-automl-forecasting-training-job-2": {
      "executorLabel": "exec-automl-forecasting-training-job-2",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "The dataset within the same Project from which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's [training_task_definition] [google.cloud.aiplatform.v1beta1.TrainingPipeline.training_task_definition]. For time series Datasets, all their data is exported to training, to pick and choose from."
          }
        },
        "parameters": {
          "additional_experiments": {
            "description": "Additional experiment flags for the time series forcasting training.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "available_at_forecast_columns": {
            "description": "Column names of columns that are available at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is known at forecast.",
            "parameterType": "LIST"
          },
          "budget_milli_node_hours": {
            "description": "The train budget of creating this Model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a Model for the given training set, the training won't be attempted and will error. The minimum value is 1000 and the maximum is 72000.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "column_specs": {
            "description": "Alternative to column_transformations where the keys of the dict are column names and their respective values are one of AutoMLTabularTrainingJob.column_data_types. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "column_transformations": {
            "description": "Transformations to apply to the input columns (i.e. columns other than the targetColumn). Each transformation may produce multiple result values from the column's value, and all are used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed. Consider using column_specs as column_transformations will be deprecated eventually.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "context_window": {
            "description": "The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] fields. When not provided uses the default value of 0 which means the model sets each series context window to be 0 (also known as \"cold start\"). Inclusive.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_count": {
            "description": "The number of data granularity units between data points in the training data. If [data_granularity_unit] is `minute`, can be 1, 5, 10, 15, or 30. For all other values of [data_granularity_unit], must be 1.",
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_unit": {
            "description": "The data granularity unit. Accepted values are `minute`, `hour`, `day`, `week`, `month`, `year`.",
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of this TrainingPipeline.",
            "parameterType": "STRING"
          },
          "export_evaluated_data_items": {
            "defaultValue": false,
            "description": "Whether to export the test set predictions to a BigQuery table. If False, then the export is not performed.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "export_evaluated_data_items_bigquery_destination_uri": {
            "description": "URI of desired destination BigQuery table for exported test set predictions. Expected format: `bq://<project_id>:<dataset_id>:<table>` If not specified, then results are exported to the following auto-created BigQuery table: `<project_id>:export_evaluated_examples_<model_name>_<yyyy_MM_dd'T'HH_mm_ss_SSS'Z'>.evaluated_examples` Applies only if [export_evaluated_data_items] is True.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "export_evaluated_data_items_override_destination": {
            "description": "Whether to override the contents of [export_evaluated_data_items_bigquery_destination_uri], if the table exists, for exported test set predictions. If False, and the table exists, then the training job will fail. Applies only if [export_evaluated_data_items] is True and [export_evaluated_data_items_bigquery_destination_uri] is specified.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "forecast_horizon": {
            "description": "The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] field. Inclusive.",
            "parameterType": "NUMBER_INTEGER"
          },
          "hierarchy_group_columns": {
            "description": "A list of time series attribute column names that define the time series hierarchy. Only one level of hierarchy is supported, ex. `region` for a hierarchy of stores or `department` for a hierarchy of products. If multiple columns are specified, time series will be grouped by their combined values, ex. (`blue`, `large`) for `color` and `size`, up to 5 columns are accepted. If no group columns are specified, all time series are considered to be part of the same group.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "hierarchy_group_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over both the horizon and time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_group_total_weight": {
            "description": "The weight of the loss for predictions aggregated over time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over the horizon for a single time series.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "holiday_regions": {
            "description": "The geographical regions to use when creating holiday features. This option is only allowed when data_granularity_unit is `day`. Acceptable values can come from any of the following levels:\nTop level: GLOBAL Second level: continental regions\nNA: North America\nJAPAC: Japan and Asia Pacific\nEMEA: Europe, the Middle East and Africa\nLAC: Latin America and the Caribbean Third level: countries from ISO 3166-1 Country codes.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "is_default_version": {
            "description": "When set to True, the newly uploaded model version will automatically have alias \"default\" included. Subsequent uses of the model produced by this job without a version specified will use this \"default\" version. When set to False, the \"default\" alias will not be moved. Actions targeting the model version produced by this job will need to specifically reference this version by ID or alias. New model uploads, i.e. version 1, will always be \"default\" aliased.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "labels": {
            "defaultValue": {},
            "description": "The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_display_name": {
            "description": "If the script produces a managed Vertex AI Model. The display name of the Model. The name can be up to 128 characters long and can be consist of any UTF-8 characters. If not provided upon creation, the job's display_name is used.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the model. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, the trained Model will be secured by this key. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "description": "The ID to use for the Model produced by this job, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_labels": {
            "description": "The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "model_version_aliases": {
            "description": "User provided version aliases so that the model version uploaded by this job can be referenced via alias instead of auto-generated version ID. A default version alias will be created for the first version of the model. The format is [a-z][a-zA-Z0-9-]{0,126}[a-z0-9]",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "model_version_description": {
            "description": "The description of the model version being uploaded by this job.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "optimization_objective": {
            "description": "Objective function the model is to be optimized towards. The training process creates a Model that optimizes the value of the objective function over the validation set. The supported optimization objectives: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). \"minimize-quantile-loss\" - Minimize the quantile loss at the defined quantiles. (Set this objective to build quantile forecasts.)",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "parent_model": {
            "description": "The resource name or model ID of an existing model. The new model uploaded by this job will be a version of `parent_model`. Only set this field when training a new version of an existing model.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predefined_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {`TRAIN`, `VALIDATE`, `TEST`}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "description": "Project to retrieve dataset from.",
            "parameterType": "STRING"
          },
          "quantiles": {
            "description": "Quantiles to use for the `minimize-quantile-loss` [AutoMLForecastingTrainingJob.optimization_objective]. This argument is required in this case. Accepts up to 5 quantiles in the form of a double from 0 to 1, exclusive. Each quantile must be unique.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "target_column": {
            "description": "Name of the column that the Model is to predict values for. This column must be unavailable at forecast.",
            "parameterType": "STRING"
          },
          "test_fraction_split": {
            "description": "The fraction of the input data that is to be used to evaluate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "time_column": {
            "description": "Name of the column that identifies time order in the time series. This column must be available at forecast.",
            "parameterType": "STRING"
          },
          "time_series_attribute_columns": {
            "description": "Column names that should be used as attribute columns. Each column is constant within a time series.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "time_series_identifier_column": {
            "description": "Name of the column that identifies the time series.",
            "parameterType": "STRING"
          },
          "timestamp_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key values of the key (the values in the column) must be in RFC 3339 `date-time` format, where `time-offset` = `\"Z\"` (e.g. 1985-04-12T23:20:50.52Z). If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets. This parameter must be used with training_fraction_split, validation_fraction_split, and test_fraction_split.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the training pipeline. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if `model_to_upload` is not set separately. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_fraction_split": {
            "description": "The fraction of the input data that is to be used to train the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "unavailable_at_forecast_columns": {
            "description": "Column names of columns that are unavailable at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is unknown before the forecast (e.g. population of a city in a given year, or weather on a given day).",
            "parameterType": "LIST"
          },
          "validation_fraction_split": {
            "description": "The fraction of the input data that is to be used to validate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "validation_options": {
            "description": "Validation options for the data validation component. The available options are: \"fail-pipeline\" - (default), will validate against the validation and fail the pipeline if it fails. \"ignore-validation\" - ignore the results of the validation and continue the pipeline",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "weight_column": {
            "description": "Name of the column that should be used as the weight column. Higher values in this column give more importance to the row during Model training. The column must have numeric values between 0 and 10000 inclusively, and 0 value means that the row is ignored. If the weight column field is not set, then all rows are assumed to have equal weight of 1.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_column": {
            "description": "Name of the column that should be used to filter input rows. The column should contain either booleans or string booleans; if the value of the row is True, generate a sliding window from that row.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_max_count": {
            "description": "Number of rows that should be used to generate input examples. If the total row count is larger than this number, the input data will be randomly sampled to hit the count.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "window_stride_length": {
            "description": "Step length used to generate input examples. Every `window_stride_length` rows will be used to generate a sliding window.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "google.VertexModel",
              "schemaVersion": "0.0.1"
            },
            "description": "The trained Vertex AI Model resource or None if training did not produce a Vertex AI Model."
          }
        }
      }
    },
    "comp-automl-forecasting-training-job-3": {
      "executorLabel": "exec-automl-forecasting-training-job-3",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "The dataset within the same Project from which data will be used to train the Model. The Dataset must use schema compatible with Model being trained, and what is compatible should be described in the used TrainingPipeline's [training_task_definition] [google.cloud.aiplatform.v1beta1.TrainingPipeline.training_task_definition]. For time series Datasets, all their data is exported to training, to pick and choose from."
          }
        },
        "parameters": {
          "additional_experiments": {
            "description": "Additional experiment flags for the time series forcasting training.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "available_at_forecast_columns": {
            "description": "Column names of columns that are available at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is known at forecast.",
            "parameterType": "LIST"
          },
          "budget_milli_node_hours": {
            "description": "The train budget of creating this Model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a Model for the given training set, the training won't be attempted and will error. The minimum value is 1000 and the maximum is 72000.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "column_specs": {
            "description": "Alternative to column_transformations where the keys of the dict are column names and their respective values are one of AutoMLTabularTrainingJob.column_data_types. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "column_transformations": {
            "description": "Transformations to apply to the input columns (i.e. columns other than the targetColumn). Each transformation may produce multiple result values from the column's value, and all are used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter. Only columns with no child should have a transformation. If an input column has no transformations on it, such a column is ignored by the training, except for the targetColumn, which should have no transformations defined on. Only one of column_transformations or column_specs should be passed. Consider using column_specs as column_transformations will be deprecated eventually.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "context_window": {
            "description": "The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] fields. When not provided uses the default value of 0 which means the model sets each series context window to be 0 (also known as \"cold start\"). Inclusive.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_count": {
            "description": "The number of data granularity units between data points in the training data. If [data_granularity_unit] is `minute`, can be 1, 5, 10, 15, or 30. For all other values of [data_granularity_unit], must be 1.",
            "parameterType": "NUMBER_INTEGER"
          },
          "data_granularity_unit": {
            "description": "The data granularity unit. Accepted values are `minute`, `hour`, `day`, `week`, `month`, `year`.",
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of this TrainingPipeline.",
            "parameterType": "STRING"
          },
          "export_evaluated_data_items": {
            "defaultValue": false,
            "description": "Whether to export the test set predictions to a BigQuery table. If False, then the export is not performed.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "export_evaluated_data_items_bigquery_destination_uri": {
            "description": "URI of desired destination BigQuery table for exported test set predictions. Expected format: `bq://<project_id>:<dataset_id>:<table>` If not specified, then results are exported to the following auto-created BigQuery table: `<project_id>:export_evaluated_examples_<model_name>_<yyyy_MM_dd'T'HH_mm_ss_SSS'Z'>.evaluated_examples` Applies only if [export_evaluated_data_items] is True.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "export_evaluated_data_items_override_destination": {
            "description": "Whether to override the contents of [export_evaluated_data_items_bigquery_destination_uri], if the table exists, for exported test set predictions. If False, and the table exists, then the training job will fail. Applies only if [export_evaluated_data_items] is True and [export_evaluated_data_items_bigquery_destination_uri] is specified.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "forecast_horizon": {
            "description": "The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the [data_granularity_unit] and [data_granularity_count] field. Inclusive.",
            "parameterType": "NUMBER_INTEGER"
          },
          "hierarchy_group_columns": {
            "description": "A list of time series attribute column names that define the time series hierarchy. Only one level of hierarchy is supported, ex. `region` for a hierarchy of stores or `department` for a hierarchy of products. If multiple columns are specified, time series will be grouped by their combined values, ex. (`blue`, `large`) for `color` and `size`, up to 5 columns are accepted. If no group columns are specified, all time series are considered to be part of the same group.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "hierarchy_group_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over both the horizon and time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_group_total_weight": {
            "description": "The weight of the loss for predictions aggregated over time series in the same hierarchy group.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "hierarchy_temporal_total_weight": {
            "description": "The weight of the loss for predictions aggregated over the horizon for a single time series.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "holiday_regions": {
            "description": "The geographical regions to use when creating holiday features. This option is only allowed when data_granularity_unit is `day`. Acceptable values can come from any of the following levels:\nTop level: GLOBAL Second level: continental regions\nNA: North America\nJAPAC: Japan and Asia Pacific\nEMEA: Europe, the Middle East and Africa\nLAC: Latin America and the Caribbean Third level: countries from ISO 3166-1 Country codes.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "is_default_version": {
            "description": "When set to True, the newly uploaded model version will automatically have alias \"default\" included. Subsequent uses of the model produced by this job without a version specified will use this \"default\" version. When set to False, the \"default\" alias will not be moved. Actions targeting the model version produced by this job will need to specifically reference this version by ID or alias. New model uploads, i.e. version 1, will always be \"default\" aliased.",
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "labels": {
            "defaultValue": {},
            "description": "The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_display_name": {
            "description": "If the script produces a managed Vertex AI Model. The display name of the Model. The name can be up to 128 characters long and can be consist of any UTF-8 characters. If not provided upon creation, the job's display_name is used.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the model. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, the trained Model will be secured by this key. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "description": "The ID to use for the Model produced by this job, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_labels": {
            "description": "The labels with user-defined metadata to organize your Models. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "model_version_aliases": {
            "description": "User provided version aliases so that the model version uploaded by this job can be referenced via alias instead of auto-generated version ID. A default version alias will be created for the first version of the model. The format is [a-z][a-zA-Z0-9-]{0,126}[a-z0-9]",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "model_version_description": {
            "description": "The description of the model version being uploaded by this job.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "optimization_objective": {
            "description": "Objective function the model is to be optimized towards. The training process creates a Model that optimizes the value of the objective function over the validation set. The supported optimization objectives: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). \"minimize-quantile-loss\" - Minimize the quantile loss at the defined quantiles. (Set this objective to build quantile forecasts.)",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "parent_model": {
            "description": "The resource name or model ID of an existing model. The new model uploaded by this job will be a version of `parent_model`. Only set this field when training a new version of an existing model.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predefined_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key (either the label's value or value in the column) must be one of {`TRAIN`, `VALIDATE`, `TEST`}, and it defines to which set the given piece of data is assigned. If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "description": "Project to retrieve dataset from.",
            "parameterType": "STRING"
          },
          "quantiles": {
            "description": "Quantiles to use for the `minimize-quantile-loss` [AutoMLForecastingTrainingJob.optimization_objective]. This argument is required in this case. Accepts up to 5 quantiles in the form of a double from 0 to 1, exclusive. Each quantile must be unique.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "target_column": {
            "description": "Name of the column that the Model is to predict values for. This column must be unavailable at forecast.",
            "parameterType": "STRING"
          },
          "test_fraction_split": {
            "description": "The fraction of the input data that is to be used to evaluate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "time_column": {
            "description": "Name of the column that identifies time order in the time series. This column must be available at forecast.",
            "parameterType": "STRING"
          },
          "time_series_attribute_columns": {
            "description": "Column names that should be used as attribute columns. Each column is constant within a time series.",
            "isOptional": true,
            "parameterType": "LIST"
          },
          "time_series_identifier_column": {
            "description": "Name of the column that identifies the time series.",
            "parameterType": "STRING"
          },
          "timestamp_split_column_name": {
            "description": "The key is a name of one of the Dataset's data columns. The value of the key values of the key (the values in the column) must be in RFC 3339 `date-time` format, where `time-offset` = `\"Z\"` (e.g. 1985-04-12T23:20:50.52Z). If for a piece of data the key is not present or has an invalid value, that piece is ignored by the pipeline. Supported only for tabular and time series Datasets. This parameter must be used with training_fraction_split, validation_fraction_split, and test_fraction_split.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the training pipeline. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if `model_to_upload` is not set separately. Overrides encryption_spec_key_name set in aiplatform.init.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_fraction_split": {
            "description": "The fraction of the input data that is to be used to train the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "unavailable_at_forecast_columns": {
            "description": "Column names of columns that are unavailable at forecast. Each column contains information for the given entity (identified by the [time_series_identifier_column]) that is unknown before the forecast (e.g. population of a city in a given year, or weather on a given day).",
            "parameterType": "LIST"
          },
          "validation_fraction_split": {
            "description": "The fraction of the input data that is to be used to validate the Model. This is ignored if Dataset is not provided.",
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "validation_options": {
            "description": "Validation options for the data validation component. The available options are: \"fail-pipeline\" - (default), will validate against the validation and fail the pipeline if it fails. \"ignore-validation\" - ignore the results of the validation and continue the pipeline",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "weight_column": {
            "description": "Name of the column that should be used as the weight column. Higher values in this column give more importance to the row during Model training. The column must have numeric values between 0 and 10000 inclusively, and 0 value means that the row is ignored. If the weight column field is not set, then all rows are assumed to have equal weight of 1.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_column": {
            "description": "Name of the column that should be used to filter input rows. The column should contain either booleans or string booleans; if the value of the row is True, generate a sliding window from that row.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "window_max_count": {
            "description": "Number of rows that should be used to generate input examples. If the total row count is larger than this number, the input data will be randomly sampled to hit the count.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "window_stride_length": {
            "description": "Step length used to generate input examples. Every `window_stride_length` rows will be used to generate a sliding window.",
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "google.VertexModel",
              "schemaVersion": "0.0.1"
            },
            "description": "The trained Vertex AI Model resource or None if training did not produce a Vertex AI Model."
          }
        }
      }
    },
    "comp-bigquery-create-model-job": {
      "executorLabel": "exec-bigquery-create-model-job",
      "inputDefinitions": {
        "parameters": {
          "job_configuration_query": {
            "defaultValue": {},
            "description": "A json formatted string describing the rest of the job configuration. For more details, see https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationQuery",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "labels": {
            "defaultValue": {},
            "description": "The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only containlowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.\nExample: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Location of the job to create the BigQuery model. If not set, default to `US` multi-region.  For more details, see https://cloud.google.com/bigquery/docs/locations#specifying_your_location",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "Project to run BigQuery model creation job. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "query": {
            "description": "SQL query text to execute. Only standard SQL is supported.  If query are both specified in here and in job_configuration_query, the value in here will override the other one.",
            "parameterType": "STRING"
          },
          "query_parameters": {
            "defaultValue": [],
            "description": "Query parameters for standard SQL queries. If query_parameters are both specified in here and in job_configuration_query, the value in here will override the other one.",
            "isOptional": true,
            "parameterType": "LIST"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "google.BQMLModel",
              "schemaVersion": "0.0.1"
            },
            "description": "Describes the model which is created."
          }
        },
        "parameters": {
          "gcp_resources": {
            "description": "Serialized gcp_resources proto tracking the BigQuery job. For more details, see https://github.com/kubeflow/pipelines/blob/master/components/google-cloud/google_cloud_pipeline_components/proto/README.md.",
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-condition-1": {
      "dag": {
        "tasks": {
          "aggregate-clusters": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-aggregate-clusters"
            },
            "dependentTasks": [
              "auto-cluster"
            ],
            "inputs": {
              "parameters": {
                "category_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "auto-cluster"
                  }
                },
                "model_name": {
                  "componentInputParameter": "pipelinechannel--model_name"
                },
                "source_table": {
                  "componentInputParameter": "pipelinechannel--cluster_table"
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--cluster_table_agg"
                },
                "train_end": {
                  "componentInputParameter": "pipelinechannel--train_end"
                },
                "train_st": {
                  "componentInputParameter": "pipelinechannel--train_st"
                },
                "valid_end": {
                  "componentInputParameter": "pipelinechannel--valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "pipelinechannel--valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "Aggregate category clusters"
            }
          },
          "auto-cluster": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-auto-cluster"
            },
            "dependentTasks": [
              "train-classification-model"
            ],
            "inputs": {
              "parameters": {
                "classified_terms_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "train-classification-model"
                  }
                },
                "cluster_max": {
                  "componentInputParameter": "pipelinechannel--auto_max_cluster"
                },
                "cluster_min": {
                  "componentInputParameter": "pipelinechannel--auto_min_cluster"
                },
                "cluster_train_table": {
                  "componentInputParameter": "pipelinechannel--auto_cluster_train_table"
                },
                "labels": {
                  "componentInputParameter": "pipelinechannel--label_list"
                },
                "project_id": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--auto_cluster_target_table"
                }
              }
            },
            "taskInfo": {
              "name": "Auto cluster each category"
            }
          },
          "automl-forecasting-training-job-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automl-forecasting-training-job-2"
            },
            "dependentTasks": [
              "time-series-dataset-create-2"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create-2"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constant": [
                      "date"
                    ]
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "pipelinechannel--budget_milli_node_hours_cluster"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constant": [
                      {
                        "numeric": {
                          "columnName": "score"
                        }
                      },
                      {
                        "timestamp": {
                          "columnName": "date"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p1"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p2"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p3"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p4"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p5"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p6"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p7"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p8"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p9"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p10"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p11"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p12"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p13"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p14"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p15"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p16"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p17"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p18"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p19"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p20"
                        }
                      }
                    ]
                  }
                },
                "context_window": {
                  "componentInputParameter": "pipelinechannel--context_window"
                },
                "data_granularity_count": {
                  "runtimeValue": {
                    "constant": 1.0
                  }
                },
                "data_granularity_unit": {
                  "runtimeValue": {
                    "constant": "week"
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constant": "train-cluster-forecast-futurama"
                  }
                },
                "export_evaluated_data_items": {
                  "runtimeValue": {
                    "constant": true
                  }
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "pipelinechannel--target_cluster_forecast_table"
                },
                "export_evaluated_data_items_override_destination": {
                  "runtimeValue": {
                    "constant": true
                  }
                },
                "forecast_horizon": {
                  "componentInputParameter": "pipelinechannel--forecast_horizon"
                },
                "location": {
                  "componentInputParameter": "pipelinechannel--location"
                },
                "model_display_name": {
                  "runtimeValue": {
                    "constant": "cluster-forecast-futurama"
                  }
                },
                "optimization_objective": {
                  "runtimeValue": {
                    "constant": "minimize-rmse"
                  }
                },
                "predefined_split_column_name": {
                  "runtimeValue": {
                    "constant": "split_col"
                  }
                },
                "project": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                },
                "target_column": {
                  "runtimeValue": {
                    "constant": "score"
                  }
                },
                "time_column": {
                  "runtimeValue": {
                    "constant": "date"
                  }
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constant": [
                      "topic_id",
                      "category",
                      "comments_embed_p1",
                      "comments_embed_p2",
                      "comments_embed_p3",
                      "comments_embed_p4",
                      "comments_embed_p5",
                      "comments_embed_p6",
                      "comments_embed_p7",
                      "comments_embed_p8",
                      "comments_embed_p9",
                      "comments_embed_p10",
                      "comments_embed_p11",
                      "comments_embed_p12",
                      "comments_embed_p13",
                      "comments_embed_p14",
                      "comments_embed_p15",
                      "comments_embed_p16",
                      "comments_embed_p17",
                      "comments_embed_p18",
                      "comments_embed_p19",
                      "comments_embed_p20"
                    ]
                  }
                },
                "time_series_identifier_column": {
                  "runtimeValue": {
                    "constant": "series_id"
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constant": [
                      "score"
                    ]
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Forecast category clusters"
            }
          },
          "time-series-dataset-create-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create-2"
            },
            "dependentTasks": [
              "aggregate-clusters"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_agg_table",
                    "producerTask": "aggregate-clusters"
                  }
                },
                "display_name": {
                  "componentInputParameter": "pipelinechannel--ds_display_name_cluster"
                },
                "location": {
                  "componentInputParameter": "pipelinechannel--location"
                },
                "project": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "Forecast term-level"
            }
          },
          "train-classification-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-classification-model"
            },
            "inputs": {
              "parameters": {
                "classification_budget_hours": {
                  "componentInputParameter": "pipelinechannel--classification_model_budget"
                },
                "classification_model_name": {
                  "componentInputParameter": "pipelinechannel--classification_model_name"
                },
                "label_table": {
                  "componentInputParameter": "pipelinechannel--label_table"
                },
                "project_id": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                },
                "source_table": {
                  "componentInputParameter": "pipelinechannel--prep-forecast-term-level-term_train_table"
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--scored_classification_table"
                },
                "train_table": {
                  "componentInputParameter": "pipelinechannel--classification_train_table"
                }
              }
            },
            "taskInfo": {
              "name": "Train classification model on examples"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "pipelinechannel--auto_cluster_target_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--auto_cluster_train_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--auto_max_cluster": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--auto_min_cluster": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--budget_milli_node_hours_cluster": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--classification_model_budget": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--classification_model_name": {
            "parameterType": "STRING"
          },
          "pipelinechannel--classification_train_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--cluster_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--cluster_table_agg": {
            "parameterType": "STRING"
          },
          "pipelinechannel--context_window": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--ds_display_name_cluster": {
            "parameterType": "STRING"
          },
          "pipelinechannel--forecast_horizon": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--if-tbl-exists-Output": {
            "parameterType": "STRING"
          },
          "pipelinechannel--label_list": {
            "parameterType": "LIST"
          },
          "pipelinechannel--label_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--location": {
            "parameterType": "STRING"
          },
          "pipelinechannel--model_name": {
            "parameterType": "STRING"
          },
          "pipelinechannel--prep-forecast-term-level-term_train_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--scored_classification_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--target_cluster_forecast_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--train_end": {
            "parameterType": "STRING"
          },
          "pipelinechannel--train_st": {
            "parameterType": "STRING"
          },
          "pipelinechannel--valid_end": {
            "parameterType": "STRING"
          },
          "pipelinechannel--valid_st": {
            "parameterType": "STRING"
          },
          "pipelinechannel--vertex_project": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-condition-2": {
      "dag": {
        "tasks": {
          "aggregate-clusters-basic": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-aggregate-clusters-basic"
            },
            "dependentTasks": [
              "nlp-featurize-and-cluster"
            ],
            "inputs": {
              "parameters": {
                "source_table": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_table",
                    "producerTask": "nlp-featurize-and-cluster"
                  }
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--cluster_table_agg_basic"
                },
                "train_end": {
                  "componentInputParameter": "pipelinechannel--train_end"
                },
                "train_st": {
                  "componentInputParameter": "pipelinechannel--train_st"
                },
                "valid_end": {
                  "componentInputParameter": "pipelinechannel--valid_end"
                },
                "valid_st": {
                  "componentInputParameter": "pipelinechannel--valid_st"
                }
              }
            },
            "taskInfo": {
              "name": "Basic clustering (unsupervised)"
            }
          },
          "alter-basic-cluster-forecast-table": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-alter-basic-cluster-forecast-table"
            },
            "dependentTasks": [
              "create-partitioned-forecast-table"
            ],
            "inputs": {
              "parameters": {
                "source_table": {
                  "componentInputParameter": "pipelinechannel--target_cluster_forecast_table_basic_partitioned"
                }
              }
            },
            "taskInfo": {
              "name": "Adding table descriptions"
            }
          },
          "alter-basic-cluster-term-table": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-alter-basic-cluster-term-table"
            },
            "dependentTasks": [
              "nlp-featurize-and-cluster"
            ],
            "inputs": {
              "parameters": {
                "source_table": {
                  "componentInputParameter": "pipelinechannel--cluster_table"
                }
              }
            },
            "taskInfo": {
              "name": "Altering table descriptions"
            }
          },
          "automl-forecasting-training-job-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automl-forecasting-training-job-3"
            },
            "dependentTasks": [
              "time-series-dataset-create-3"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "time-series-dataset-create-3"
                  }
                }
              },
              "parameters": {
                "available_at_forecast_columns": {
                  "runtimeValue": {
                    "constant": [
                      "date"
                    ]
                  }
                },
                "budget_milli_node_hours": {
                  "componentInputParameter": "pipelinechannel--budget_milli_node_hours_cluster"
                },
                "column_transformations": {
                  "runtimeValue": {
                    "constant": [
                      {
                        "numeric": {
                          "columnName": "score"
                        }
                      },
                      {
                        "timestamp": {
                          "columnName": "date"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p1"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p2"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p3"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p4"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p5"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p6"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p7"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p8"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p9"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p10"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p11"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p12"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p13"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p14"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p15"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p16"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p17"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p18"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p19"
                        }
                      },
                      {
                        "numeric": {
                          "columnName": "comments_embed_p20"
                        }
                      }
                    ]
                  }
                },
                "context_window": {
                  "componentInputParameter": "pipelinechannel--context_window"
                },
                "data_granularity_count": {
                  "runtimeValue": {
                    "constant": 1.0
                  }
                },
                "data_granularity_unit": {
                  "runtimeValue": {
                    "constant": "week"
                  }
                },
                "display_name": {
                  "runtimeValue": {
                    "constant": "train-cluster-forecast-futurama"
                  }
                },
                "export_evaluated_data_items": {
                  "runtimeValue": {
                    "constant": true
                  }
                },
                "export_evaluated_data_items_bigquery_destination_uri": {
                  "componentInputParameter": "pipelinechannel--target_cluster_forecast_table_basic"
                },
                "export_evaluated_data_items_override_destination": {
                  "runtimeValue": {
                    "constant": true
                  }
                },
                "forecast_horizon": {
                  "componentInputParameter": "pipelinechannel--forecast_horizon"
                },
                "location": {
                  "componentInputParameter": "pipelinechannel--location"
                },
                "model_display_name": {
                  "runtimeValue": {
                    "constant": "cluster-forecast-futurama"
                  }
                },
                "optimization_objective": {
                  "runtimeValue": {
                    "constant": "minimize-rmse"
                  }
                },
                "predefined_split_column_name": {
                  "runtimeValue": {
                    "constant": "split_col"
                  }
                },
                "project": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                },
                "target_column": {
                  "runtimeValue": {
                    "constant": "score"
                  }
                },
                "time_column": {
                  "runtimeValue": {
                    "constant": "date"
                  }
                },
                "time_series_attribute_columns": {
                  "runtimeValue": {
                    "constant": [
                      "comments_embed_p1",
                      "comments_embed_p2",
                      "comments_embed_p3",
                      "comments_embed_p4",
                      "comments_embed_p5",
                      "comments_embed_p6",
                      "comments_embed_p7",
                      "comments_embed_p8",
                      "comments_embed_p9",
                      "comments_embed_p10",
                      "comments_embed_p11",
                      "comments_embed_p12",
                      "comments_embed_p13",
                      "comments_embed_p14",
                      "comments_embed_p15",
                      "comments_embed_p16",
                      "comments_embed_p17",
                      "comments_embed_p18",
                      "comments_embed_p19",
                      "comments_embed_p20"
                    ]
                  }
                },
                "time_series_identifier_column": {
                  "runtimeValue": {
                    "constant": "topic_id"
                  }
                },
                "unavailable_at_forecast_columns": {
                  "runtimeValue": {
                    "constant": [
                      "score"
                    ]
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Forecast basic clusters"
            }
          },
          "bigquery-create-model-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-create-model-job"
            },
            "inputs": {
              "parameters": {
                "location": {
                  "runtimeValue": {
                    "constant": "US"
                  }
                },
                "pipelinechannel--model_name": {
                  "componentInputParameter": "pipelinechannel--model_name"
                },
                "pipelinechannel--n_clusters": {
                  "componentInputParameter": "pipelinechannel--n_clusters"
                },
                "pipelinechannel--source_table": {
                  "componentInputParameter": "pipelinechannel--source_table"
                },
                "pipelinechannel--subcat_id": {
                  "componentInputParameter": "pipelinechannel--subcat_id"
                },
                "pipelinechannel--train_st": {
                  "componentInputParameter": "pipelinechannel--train_st"
                },
                "project": {
                  "runtimeValue": {
                    "constant": "cpg-cdp"
                  }
                },
                "query": {
                  "runtimeValue": {
                    "constant": "CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n                        RETURNS \n                        STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                               p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                               p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                               p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                               p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n                        AS (\n                        STRUCT(\n                            arr[OFFSET(0)]\n                            , arr[OFFSET(1)]\n                            , arr[OFFSET(2)]\n                            , arr[OFFSET(3)]\n                            , arr[OFFSET(4)]\n                            , arr[OFFSET(5)]\n                            , arr[OFFSET(6)]\n                            , arr[OFFSET(7)]\n                            , arr[OFFSET(8)]\n                            , arr[OFFSET(9)]\n                            , arr[OFFSET(10)]\n                            , arr[OFFSET(11)]\n                            , arr[OFFSET(12)]\n                            , arr[OFFSET(13)]\n                            , arr[OFFSET(14)]\n                            , arr[OFFSET(15)]\n                            , arr[OFFSET(16)]\n                            , arr[OFFSET(17)]\n                            , arr[OFFSET(18)]\n                            , arr[OFFSET(19)]    \n                        ));\n                        \n            CREATE OR REPLACE MODEL `{{$.inputs.parameters['pipelinechannel--model_name']}}` OPTIONS(model_type='kmeans', KMEANS_INIT_METHOD='KMEANS++', num_clusters={{$.inputs.parameters['pipelinechannel--n_clusters']}}) AS\n                    select arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT date, geo_name, term AS sentences, SUM(score) * 10000 as score\n                      FROM `{{$.inputs.parameters['pipelinechannel--source_table']}}`\n                      WHERE date >= '{{$.inputs.parameters['pipelinechannel--train_st']}}'\n                      and category_id = {{$.inputs.parameters['pipelinechannel--subcat_id']}}\n                      GROUP BY 1, 2, 3\n                      ))\n    "
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Train k-means basic BQ Model"
            }
          },
          "create-partitioned-forecast-table": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-create-partitioned-forecast-table"
            },
            "dependentTasks": [
              "automl-forecasting-training-job-3"
            ],
            "inputs": {
              "parameters": {
                "source_table": {
                  "componentInputParameter": "pipelinechannel--target_cluster_forecast_table_basic"
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--target_cluster_forecast_table_basic_partitioned"
                }
              }
            },
            "taskInfo": {
              "name": "Creating final partitioned table"
            }
          },
          "nlp-featurize-and-cluster": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-nlp-featurize-and-cluster"
            },
            "dependentTasks": [
              "bigquery-create-model-job"
            ],
            "inputs": {
              "parameters": {
                "model_name": {
                  "componentInputParameter": "pipelinechannel--model_name"
                },
                "n_clusters": {
                  "componentInputParameter": "pipelinechannel--n_clusters"
                },
                "source_table": {
                  "componentInputParameter": "pipelinechannel--source_table"
                },
                "subcat_id": {
                  "componentInputParameter": "pipelinechannel--subcat_id"
                },
                "target_table": {
                  "componentInputParameter": "pipelinechannel--cluster_table"
                },
                "train_end": {
                  "componentInputParameter": "pipelinechannel--train_end"
                },
                "train_st": {
                  "componentInputParameter": "pipelinechannel--train_st"
                }
              }
            },
            "taskInfo": {
              "name": "Add NLP embeddings and cluster"
            }
          },
          "time-series-dataset-create-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-time-series-dataset-create-3"
            },
            "dependentTasks": [
              "aggregate-clusters-basic"
            ],
            "inputs": {
              "parameters": {
                "bq_source": {
                  "taskOutputParameter": {
                    "outputParameterKey": "term_cluster_agg_table",
                    "producerTask": "aggregate-clusters-basic"
                  }
                },
                "display_name": {
                  "componentInputParameter": "pipelinechannel--ds_display_name_cluster"
                },
                "location": {
                  "componentInputParameter": "pipelinechannel--location"
                },
                "project": {
                  "componentInputParameter": "pipelinechannel--vertex_project"
                }
              }
            },
            "taskInfo": {
              "name": "Aggregate basic clusters"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "pipelinechannel--budget_milli_node_hours_cluster": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--cluster_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--cluster_table_agg_basic": {
            "parameterType": "STRING"
          },
          "pipelinechannel--context_window": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--ds_display_name_cluster": {
            "parameterType": "STRING"
          },
          "pipelinechannel--forecast_horizon": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--if-tbl-exists-Output": {
            "parameterType": "STRING"
          },
          "pipelinechannel--location": {
            "parameterType": "STRING"
          },
          "pipelinechannel--model_name": {
            "parameterType": "STRING"
          },
          "pipelinechannel--n_clusters": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--source_table": {
            "parameterType": "STRING"
          },
          "pipelinechannel--subcat_id": {
            "parameterType": "NUMBER_INTEGER"
          },
          "pipelinechannel--target_cluster_forecast_table_basic": {
            "parameterType": "STRING"
          },
          "pipelinechannel--target_cluster_forecast_table_basic_partitioned": {
            "parameterType": "STRING"
          },
          "pipelinechannel--train_end": {
            "parameterType": "STRING"
          },
          "pipelinechannel--train_st": {
            "parameterType": "STRING"
          },
          "pipelinechannel--valid_end": {
            "parameterType": "STRING"
          },
          "pipelinechannel--valid_st": {
            "parameterType": "STRING"
          },
          "pipelinechannel--vertex_project": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-create-partitioned-forecast-table": {
      "executorLabel": "exec-create-partitioned-forecast-table",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-create-prediction-dataset-term-level": {
      "executorLabel": "exec-create-prediction-dataset-term-level",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table_uri": {
            "parameterType": "STRING"
          },
          "subcat_id": {
            "parameterType": "NUMBER_INTEGER"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "train_end": {
            "parameterType": "STRING"
          },
          "train_st": {
            "parameterType": "STRING"
          },
          "valid_end": {
            "parameterType": "STRING"
          },
          "valid_st": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "training_data_table_uri": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-create-top-mover-table": {
      "executorLabel": "exec-create-top-mover-table",
      "inputDefinitions": {
        "artifacts": {
          "trained_model": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predict_on_dt": {
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "six_month_dt": {
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "top_n_results": {
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "term_train_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-if-tbl-exists": {
      "executorLabel": "exec-if-tbl-exists",
      "inputDefinitions": {
        "parameters": {
          "project_id": {
            "parameterType": "STRING"
          },
          "table_ref": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-nlp-featurize-and-cluster": {
      "executorLabel": "exec-nlp-featurize-and-cluster",
      "inputDefinitions": {
        "parameters": {
          "model_name": {
            "parameterType": "STRING"
          },
          "n_clusters": {
            "parameterType": "NUMBER_INTEGER"
          },
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "subcat_id": {
            "parameterType": "NUMBER_INTEGER"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "train_end": {
            "parameterType": "STRING"
          },
          "train_st": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "term_cluster_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-prep-forecast-term-level": {
      "executorLabel": "exec-prep-forecast-term-level",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "term_train_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-sustained-riser-report": {
      "executorLabel": "exec-sustained-riser-report",
      "inputDefinitions": {
        "parameters": {
          "override": {
            "defaultValue": "False",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predicted_on_dt": {
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "top_n": {
            "parameterType": "NUMBER_INTEGER"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "top_riser_table": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-time-series-dataset-create": {
      "executorLabel": "exec-time-series-dataset-create",
      "inputDefinitions": {
        "parameters": {
          "bq_source": {
            "description": "BigQuery URI to the input table. For example, bq://project.dataset.table_name\".",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.",
            "parameterType": "STRING"
          },
          "encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the dataset. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this Dataset and all sub-resources of this Dataset will be secured by this key. Overrides `encryption_spec_key_name` set in `aiplatform.init`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "gcs_source": {
            "description": "Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames. For example, `\"gs://bucket/file.csv\"` or `[\"gs://bucket/file1.csv\", \"gs://bucket/file2.csv\"]`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "description": "Labels with user-defined metadata to organize your Tensorboards. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Tensorboard (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve Dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "Project to retrieve Dataset from. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "Instantiated representation of the managed time series Datasetresource."
          }
        }
      }
    },
    "comp-time-series-dataset-create-2": {
      "executorLabel": "exec-time-series-dataset-create-2",
      "inputDefinitions": {
        "parameters": {
          "bq_source": {
            "description": "BigQuery URI to the input table. For example, bq://project.dataset.table_name\".",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.",
            "parameterType": "STRING"
          },
          "encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the dataset. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this Dataset and all sub-resources of this Dataset will be secured by this key. Overrides `encryption_spec_key_name` set in `aiplatform.init`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "gcs_source": {
            "description": "Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames. For example, `\"gs://bucket/file.csv\"` or `[\"gs://bucket/file1.csv\", \"gs://bucket/file2.csv\"]`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "description": "Labels with user-defined metadata to organize your Tensorboards. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Tensorboard (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve Dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "Project to retrieve Dataset from. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "Instantiated representation of the managed time series Datasetresource."
          }
        }
      }
    },
    "comp-time-series-dataset-create-3": {
      "executorLabel": "exec-time-series-dataset-create-3",
      "inputDefinitions": {
        "parameters": {
          "bq_source": {
            "description": "BigQuery URI to the input table. For example, bq://project.dataset.table_name\".",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "display_name": {
            "description": "The user-defined name of the Dataset. The name can be up to 128 characters long and can be consist of any UTF-8 characters.",
            "parameterType": "STRING"
          },
          "encryption_spec_key_name": {
            "description": "The Cloud KMS resource identifier of the customer managed encryption key used to protect the dataset. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created. If set, this Dataset and all sub-resources of this Dataset will be secured by this key. Overrides `encryption_spec_key_name` set in `aiplatform.init`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "gcs_source": {
            "description": "Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames. For example, `\"gs://bucket/file.csv\"` or `[\"gs://bucket/file1.csv\", \"gs://bucket/file2.csv\"]`.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "description": "Labels with user-defined metadata to organize your Tensorboards. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Tensorboard (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.",
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "description": "Optional location to retrieve Dataset from.",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "defaultValue": "{{$.pipeline_google_cloud_project_id}}",
            "description": "Project to retrieve Dataset from. Defaults to the project in which the PipelineJob is run.",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            },
            "description": "Instantiated representation of the managed time series Datasetresource."
          }
        }
      }
    },
    "comp-train-classification-model": {
      "executorLabel": "exec-train-classification-model",
      "inputDefinitions": {
        "parameters": {
          "classification_budget_hours": {
            "parameterType": "NUMBER_INTEGER"
          },
          "classification_model_name": {
            "parameterType": "STRING"
          },
          "label_table": {
            "parameterType": "STRING"
          },
          "project_id": {
            "defaultValue": "cpg-cdp",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "source_table": {
            "parameterType": "STRING"
          },
          "target_table": {
            "parameterType": "STRING"
          },
          "train_table": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://trendspotting-pipeline",
  "deploymentSpec": {
    "executors": {
      "exec-aggregate-clusters": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "aggregate_clusters"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef aggregate_clusters(\n    source_table: str,\n    target_table: str,\n    category_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    model_name: str,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"term_cluster_agg_table\", str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip(\"bq://\")\n\n    target_bq_table = \"bq://\" + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n\n    bq_client.query(\n        f\"\"\"\n       CREATE OR REPLACE TABLE `{target_table}` as (\n        WITH\n          scored_trends AS (\n          SELECT\n            centroid_id as topic_id,\n            terms,\n            category\n          FROM\n            {category_table} )\n        SELECT\n          SUM(score) as score,\n          date,\n          topic_id,\n          category,\n          CONCAT(category, topic_id) as series_id,\n          AVG(comments_embed.p1) AS comments_embed_p1,\n          AVG(comments_embed.p2) AS comments_embed_p2,\n          AVG(comments_embed.p3) AS comments_embed_p3,\n          AVG(comments_embed.p4) AS comments_embed_p4,\n          AVG(comments_embed.p5) AS comments_embed_p5,\n          AVG(comments_embed.p6) AS comments_embed_p6,\n          AVG(comments_embed.p7) AS comments_embed_p7,\n          AVG(comments_embed.p8) AS comments_embed_p8,\n          AVG(comments_embed.p9) AS comments_embed_p9,\n          AVG(comments_embed.p10) AS comments_embed_p10,\n          AVG(comments_embed.p11) AS comments_embed_p11,\n          AVG(comments_embed.p12) AS comments_embed_p12,\n          AVG(comments_embed.p13) AS comments_embed_p13,\n          AVG(comments_embed.p14) AS comments_embed_p14,\n          AVG(comments_embed.p15) AS comments_embed_p15,\n          AVG(comments_embed.p16) AS comments_embed_p16,\n          AVG(comments_embed.p17) AS comments_embed_p17,\n          AVG(comments_embed.p18) AS comments_embed_p18,\n          AVG(comments_embed.p19) AS comments_embed_p19,\n          AVG(comments_embed.p20) AS comments_embed_p20,\n          case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                              when date between '{valid_st}' and '{valid_end}' then 'VALIDATE'\n                             else 'TEST' end as split_col\n        FROM (\n          SELECT\n            score,\n            a.date,\n            TOPIC_ID,\n            topic_id,\n            category,\n            a.comments_embed\n          FROM\n            {source_table} a\n          INNER JOIN\n            scored_trends b\n          ON\n            a.sentences = b.terms)\n        GROUP BY\n          date,\n          topic_id,\n          category\n        )\n          \"\"\"\n    ).result()\n\n    return (f\"{target_bq_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-aggregate-clusters-basic": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "aggregate_clusters_basic"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef aggregate_clusters_basic(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"term_cluster_agg_table\", str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip(\"bq://\")\n\n    target_bq_table = \"bq://\" + target_table\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n        bq_client.query(\n            f\"\"\"\n            CREATE OR REPLACE TABLE {target_table} as (\n            with centroids as (select * from \n            (SELECT\n            centroid_id as topic_id, feature, numerical_value\n            FROM\n              ML.CENTROIDS(MODEL `trendspotting.embed_clustering_100`)\n            )\n            PIVOT(avg(numerical_value) for feature in ('comments_embed_p1',\n            'comments_embed_p2',\n            'comments_embed_p3',\n            'comments_embed_p4',\n            'comments_embed_p5',\n            'comments_embed_p6',\n            'comments_embed_p7',\n            'comments_embed_p8',\n            'comments_embed_p9',\n            'comments_embed_p10',\n            'comments_embed_p11',\n            'comments_embed_p12',\n            'comments_embed_p13',\n            'comments_embed_p14',\n            'comments_embed_p15',\n            'comments_embed_p16',\n            'comments_embed_p17',\n            'comments_embed_p18',\n            'comments_embed_p19',\n            'comments_embed_p20'))\n                              )\n            select score, CAST(date AS DATE) as date, b.*,\n            case when date between '{train_st}' and  '{train_end}' then 'TRAIN'\n                      when date between '{valid_st}' and '{valid_end}' then 'VALIDATE'\n                     else 'TEST' end as split_col\n            from (\n                select sum(score) as score, date, topic_id \n                from {source_table} group by date, topic_id\n            ) a\n            inner join centroids b on a.topic_id = b.topic_id\n            )\n          \"\"\"\n        ).result()\n    )\n\n    return (f\"{target_bq_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-alter-basic-cluster-forecast-table": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "alter_basic_cluster_forecast_table"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef alter_basic_cluster_forecast_table(\n    source_table: str, override: str = \"False\", project_id: str = \"cpg-cdp\"\n) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n        f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"Basic Clustering Forecast Table - this table shows a foreast for the keyword clusters generated by k-means. Note this is not using custom categories, which allow users to specify keyword categories, the algorithm is unsupervised and clusters based on NLP embeddings\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN topic_id\n    SET OPTIONS (\n      description=\"The cluster ID assigned by the BQML k-means algorithm. Note the number in the table name designates the number of term clusters\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date\n    SET OPTIONS (\n      description=\"Date for the keyword\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN predicted_on_date\n    SET OPTIONS (\n      description=\"This is an output from Vertex Forecast. When a model is created it creates scenarios to test 'what-if' on various days in the past. To understand the data, you typically pick a predict_on_date as a filter to then see what the predictions looked like as of that date\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN predicted_score\n    SET OPTIONS (\n      description=\"This is the output of Vertex Forecast. It is the predicted score over the test time period (i.e. backtest)\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN score\n    SET OPTIONS (\n      description=\"This is the actual score. Used for comparing actual vs predicted and used by Vertex AI to create predictions\"\n    )\"\"\",\n    ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-alter-basic-cluster-term-table": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "alter_basic_cluster_term_table"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef alter_basic_cluster_term_table(\n    source_table: str, override: str = \"False\", project_id: str = \"cpg-cdp\"\n) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n        f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"This table contains a cross reference of the keywords and cluster IDs. Use this to explore the keywords that make up the clusters identified with BQML k-means\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN topic_id\n    SET OPTIONS (\n      description=\"Cluster ID created by BQML K-means. The number in the table name indicates how many clusters are in the table\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN NEAREST_CENTROIDS_DISTANCE\n    SET OPTIONS (\n      description=\"The closest distance shows the distance of the given row/keyword from the various cluster centers. The closest cluster gets assigned to CENTROID_ID\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN output_0\n    SET OPTIONS (\n      description=\"Vector format of the embeddings. These are transposed to the comments_embed struct so they can be read by the model. These come from tf.hub universal sentence encoder NLP model https://tfhub.dev/google/collections/universal-sentence-encoder/1\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date SET DATA TYPE DATE\n    SET OPTIONS (\n      description=\"The date corrleating to the ranked keyword\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN geo_name\n    SET OPTIONS (\n      description=\"The geographic designator for the keyword. In US, this is typically DMA, and is usually country code otherwise. Can be down to region as well\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN sentences\n    SET OPTIONS (\n      description=\"The keywords users type into google.com\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN score\n    SET OPTIONS (\n      description=\"The relative score of the keyword rank over time. This is indexed so insights are all relative to the dataset\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN comments_embed\n    SET OPTIONS (\n      description=\"See output_0. This is a transposed struct of the embedding arrays\"\n    )\"\"\",\n    ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-alter-topmover-schema": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "alter_topmover_schema"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef alter_topmover_schema(\n    source_table: str, override: str = \"False\", project_id: str = \"cpg-cdp\"\n) -> None:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project=project_id)\n\n    queries = [\n        f\"\"\"ALTER TABLE `{source_table}`\n    SET OPTIONS (\n      description=\"Top mover table, this does a backtest by taking a snapshot of the keyword scores on the date in this table. They are then compared to predictions Vertex makes in the future date. Terms that have higher scores are than before are surfaced and sorted by the difference in score\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN date\n    SET OPTIONS (\n      description=\"This is the date predicted_on is selected for the backtest. Treat all data after this date as blind and predicted by Vertex, except for the `six_mo_rank` which is actual to compare performance\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN future_date\n    SET OPTIONS (\n      description=\"This is the date in the future with respect to the backtest date. Since this is a backtest, it is in the past. In production this would be predictions into the future\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN sentences\n    SET OPTIONS (\n      description=\"The keyword a user types into google.com\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN current_rank\n    SET OPTIONS (\n      description=\"The relative score of the keyword at time of `date`\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_delta_rank\n    SET OPTIONS (\n      description=\"The difference between the `six_mo_rank` and `current_rank`\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_mo_rank\n    SET OPTIONS (\n      description=\"The actual score of the keyword forecasted at `future_date`\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN six_mo_forecast\n    SET OPTIONS (\n      description=\"The forecasted score from Vertex Forecast of the keyword forecasted at `future_date`\"\n    )\"\"\",\n        f\"\"\"ALTER TABLE `{source_table}`\n    ALTER COLUMN geo_id\n    SET OPTIONS (\n      description=\"The geographic designation of the user. For US, typically this is DMA. Outside US it is either country or region\"\n    )\"\"\",\n    ]\n    for query in queries:\n        bq_client.query(query)\n        time.sleep(2)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-auto-cluster": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "auto_cluster"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pandas' 'pyarrow' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef auto_cluster(\n    cluster_min: int,\n    cluster_max: int,\n    labels: list,\n    cluster_train_table: str,\n    classified_terms_table: str,\n    target_table: str,\n    project_id: str = \"cpg-cdp\",\n) -> str:\n\n    from google.cloud import bigquery\n    import time\n\n    bq_client = bigquery.Client(project_id)\n\n    prob_pivot_sql = \"\"\n    for i, l in enumerate(labels):\n        prob_pivot_sql += f\"(select max(probs.prob) from UNNEST(t.predicted_label_probs) probs where probs.label = '{l}') as _{i}_prob, \"\n\n    table_sql_for_clustering = f\"\"\"\n        SELECT * except(predicted_label_probs),\n        {prob_pivot_sql}\n        FROM `{classified_terms_table}` t \n        \"\"\"\n\n    kmeans_table_sql = f\"\"\"\n        create or replace table {cluster_train_table} as (\n        select distinct * EXCEPT(date, geo_id, series_id, terms, category_rank, split_col) from (\n            {table_sql_for_clustering})\n            )\n            \"\"\"\n    bq_client.query(kmeans_table_sql).result()\n\n    ## use this function to get the name of the topic in the clustering\n    def only_upper(s: str):\n        upper_chars = \"\"\n        for char in s:\n            if char.isupper():\n                upper_chars += char\n        return upper_chars\n\n        ## we use this to find where the DB index flattens for n_clusters and use that for optimal number of clusters per topic\n\n    def loop_n_clus_and_get_db_index(cluster_min: int, cluster_max: int, label: str):\n\n        label_upper = only_upper(\n            label\n        )  # get only the upper case letters to denote the model name\n        return_data = {label: []}\n        for n_clusters in range(cluster_min, cluster_max + 1):\n            print(f\"Training for {n_clusters} clusters\")\n            # return_data[label].append({'model_name': f'trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22'})\n            kmeans_sql = f\"\"\"\n            CREATE OR REPLACE MODEL trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22\n            OPTIONS(model_type='kmeans', num_clusters={n_clusters}, standardize_features = true) AS\n            select * EXCEPT(predicted_label, sentences) from `{cluster_train_table}`\n            WHERE predicted_label = '{label}'\n            \"\"\"\n            bq_client.query(kmeans_sql).result()\n            # next, get the DB index to assess the cluster quality\n            sql = f\"\"\"\n            SELECT\n              *\n            FROM\n              ML.EVALUATE (MODEL trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22)\n              \"\"\"\n            data = bq_client.query(sql).to_dataframe()\n            print(f\"DB Index: {data.davies_bouldin_index[0]}\")\n            return_data[label].append(\n                {\n                    f\"trendspotting.cat_clus_{label_upper}_{n_clusters}_png_hair_22\": data.davies_bouldin_index[\n                        0\n                    ]\n                }\n            )\n\n            time.sleep(60)\n\n        return return_data\n\n    data_dict = {}\n\n    # loop over labels\n    for label in labels:\n        print(f\"Tranining for label: {label}\")\n        cluster_data = loop_n_clus_and_get_db_index(cluster_min, cluster_max, label)\n        data_dict.update(cluster_data)  # update with the results\n        time.sleep(60)\n\n    # find the min DB score cluster for each topic, delete the other models and then score based on topic id\n\n    optimal_models_by_label = {}\n    for label in labels:\n        prior_db = 999  # set this high\n        for c in data_dict[label]:\n            optimal_model = list(data_dict[label][0].keys())[0]\n            if list(c.values())[0] < prior_db:\n                prior_db = list(c.values())[0]\n                optimal_model = list(c.keys())[0]\n                print(optimal_model)\n            optimal_models_by_label.update({label: optimal_model})\n    print(f\"Optimal models found: {optimal_models_by_label}\")\n\n    # save optimal model dictionary to gcs\n    from google.cloud import storage\n\n    import pickle\n\n    with open(\"./optimal_models.dict\", \"wb\") as file:\n        pickle.dump(optimal_models_by_label, file)\n\n    bucket_name = \"trendspotting-pipeline\"\n\n    storage_client = storage.Client(project=project_id)\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(\"optimal_models.dict\")\n\n    blob.upload_from_filename(\"optimal_models.dict\")\n\n    print(\"Deleting sub optimal models\")\n\n    # delete the sub-optimal models\n    def delete_model_sql(model_name):\n        return f\"DROP MODEL IF EXISTS {model_name}\"\n\n    for label in labels:\n        optimal_model_for_label = optimal_models_by_label[label]\n        for c in data_dict[label]:\n            if list(c.keys())[0] != optimal_model_for_label:\n                sub_optimal_model = list(c.keys())[0]\n                bq_client.query(\n                    delete_model_sql(sub_optimal_model)\n                ).result()  # clean up the models\n                time.sleep(5)\n\n    # last, score using a union query for each label\n\n    def score_cluster(label, model_name):\n        predict_sql = f\"\"\"\n                SELECT\n                  *\n                FROM\n                  ML.PREDICT (MODEL {model_name},\n                  (SELECT * EXCEPT(predicted_label, sentences), \n                  sentences as terms, \n                  predicted_label as category\n                  from `{cluster_train_table}`\n                  where predicted_label = '{label}'))\n                  \"\"\"\n        return predict_sql\n\n    predict_sql = \"\"\n    for i, label in enumerate(labels):\n        predict_sql += score_cluster(label, optimal_models_by_label[label])\n        if len(labels) - 1 == i:\n            break\n        else:\n            predict_sql += \"\"\"\n            UNION ALL\n            \"\"\"\n\n    def score_table(predict_sql, tt=target_table):\n        return f\"CREATE OR REPLACE TABLE `{tt}` AS ({predict_sql})\"\n\n    segment_score_sql = score_table(predict_sql)\n\n    bq_client.query(segment_score_sql).result()\n\n    return target_table\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-automl-forecasting-training-job": {
        "container": {
          "args": [
            "--init.project",
            "{{$.inputs.parameters['project']}}",
            "--init.location",
            "{{$.inputs.parameters['location']}}",
            "--init.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "--method.target_column",
            "{{$.inputs.parameters['target_column']}}",
            "--method.time_column",
            "{{$.inputs.parameters['time_column']}}",
            "--method.time_series_identifier_column",
            "{{$.inputs.parameters['time_series_identifier_column']}}",
            "--method.unavailable_at_forecast_columns",
            "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
            "--method.available_at_forecast_columns",
            "{{$.inputs.parameters['available_at_forecast_columns']}}",
            "--method.forecast_horizon",
            "{{$.inputs.parameters['forecast_horizon']}}",
            "--method.data_granularity_unit",
            "{{$.inputs.parameters['data_granularity_unit']}}",
            "--method.data_granularity_count",
            "{{$.inputs.parameters['data_granularity_count']}}",
            "--method.dataset",
            "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective\", \"Then\": [\"--init.optimization_objective\", \"{{$.inputs.parameters['optimization_objective']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_encryption_spec_key_name\", \"Then\": [\"--init.training_encryption_spec_key_name\", \"{{$.inputs.parameters['training_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_encryption_spec_key_name\", \"Then\": [\"--init.model_encryption_spec_key_name\", \"{{$.inputs.parameters['model_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"context_window\", \"Then\": [\"--method.context_window\", \"{{$.inputs.parameters['context_window']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_options\", \"Then\": [\"--method.validation_options\", \"{{$.inputs.parameters['validation_options']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"budget_milli_node_hours\", \"Then\": [\"--method.budget_milli_node_hours\", \"{{$.inputs.parameters['budget_milli_node_hours']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_display_name\", \"Then\": [\"--method.model_display_name\", \"{{$.inputs.parameters['model_display_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_fraction_split\", \"Then\": [\"--method.training_fraction_split\", \"{{$.inputs.parameters['training_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_fraction_split\", \"Then\": [\"--method.validation_fraction_split\", \"{{$.inputs.parameters['validation_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"test_fraction_split\", \"Then\": [\"--method.test_fraction_split\", \"{{$.inputs.parameters['test_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"predefined_split_column_name\", \"Then\": [\"--method.predefined_split_column_name\", \"{{$.inputs.parameters['predefined_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"timestamp_split_column_name\", \"Then\": [\"--method.timestamp_split_column_name\", \"{{$.inputs.parameters['timestamp_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"weight_column\", \"Then\": [\"--method.weight_column\", \"{{$.inputs.parameters['weight_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items\", \"Then\": [\"--method.export_evaluated_data_items\", \"{{$.inputs.parameters['export_evaluated_data_items']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_bigquery_destination_uri\", \"Then\": [\"--method.export_evaluated_data_items_bigquery_destination_uri\", \"{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_override_destination\", \"Then\": [\"--method.export_evaluated_data_items_override_destination\", \"{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"time_series_attribute_columns\", \"Then\": [\"--method.time_series_attribute_columns\", \"{{$.inputs.parameters['time_series_attribute_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"quantiles\", \"Then\": [\"--method.quantiles\", \"{{$.inputs.parameters['quantiles']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"labels\", \"Then\": [\"--init.labels\", \"{{$.inputs.parameters['labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_labels\", \"Then\": [\"--method.model_labels\", \"{{$.inputs.parameters['model_labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_id\", \"Then\": [\"--method.model_id\", \"{{$.inputs.parameters['model_id']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"parent_model\", \"Then\": [\"--method.parent_model\", \"{{$.inputs.parameters['parent_model']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"is_default_version\", \"Then\": [\"--method.is_default_version\", \"{{$.inputs.parameters['is_default_version']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_aliases\", \"Then\": [\"--method.model_version_aliases\", \"{{$.inputs.parameters['model_version_aliases']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_description\", \"Then\": [\"--method.model_version_description\", \"{{$.inputs.parameters['model_version_description']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_columns\", \"Then\": [\"--method.hierarchy_group_columns\", \"{{$.inputs.parameters['hierarchy_group_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_total_weight\", \"Then\": [\"--method.hierarchy_group_total_weight\", \"{{$.inputs.parameters['hierarchy_group_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_temporal_total_weight\", \"Then\": [\"--method.hierarchy_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_temporal_total_weight\", \"Then\": [\"--method.hierarchy_group_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_group_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_column\", \"Then\": [\"--method.window_column\", \"{{$.inputs.parameters['window_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_stride_length\", \"Then\": [\"--method.window_stride_length\", \"{{$.inputs.parameters['window_stride_length']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_max_count\", \"Then\": [\"--method.window_max_count\", \"{{$.inputs.parameters['window_max_count']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"holiday_regions\", \"Then\": [\"--method.holiday_regions\", \"{{$.inputs.parameters['holiday_regions']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_specs\", \"Then\": [\"--init.column_specs\", \"{{$.inputs.parameters['column_specs']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_transformations\", \"Then\": [\"--init.column_transformations\", \"{{$.inputs.parameters['column_transformations']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"additional_experiments\", \"Then\": [\"--method.additional_experiments\", \"{{$.inputs.parameters['additional_experiments']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['model'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "AutoMLForecastingTrainingJob",
            "--method_name",
            "run"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-automl-forecasting-training-job-2": {
        "container": {
          "args": [
            "--init.project",
            "{{$.inputs.parameters['project']}}",
            "--init.location",
            "{{$.inputs.parameters['location']}}",
            "--init.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "--method.target_column",
            "{{$.inputs.parameters['target_column']}}",
            "--method.time_column",
            "{{$.inputs.parameters['time_column']}}",
            "--method.time_series_identifier_column",
            "{{$.inputs.parameters['time_series_identifier_column']}}",
            "--method.unavailable_at_forecast_columns",
            "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
            "--method.available_at_forecast_columns",
            "{{$.inputs.parameters['available_at_forecast_columns']}}",
            "--method.forecast_horizon",
            "{{$.inputs.parameters['forecast_horizon']}}",
            "--method.data_granularity_unit",
            "{{$.inputs.parameters['data_granularity_unit']}}",
            "--method.data_granularity_count",
            "{{$.inputs.parameters['data_granularity_count']}}",
            "--method.dataset",
            "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective\", \"Then\": [\"--init.optimization_objective\", \"{{$.inputs.parameters['optimization_objective']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_encryption_spec_key_name\", \"Then\": [\"--init.training_encryption_spec_key_name\", \"{{$.inputs.parameters['training_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_encryption_spec_key_name\", \"Then\": [\"--init.model_encryption_spec_key_name\", \"{{$.inputs.parameters['model_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"context_window\", \"Then\": [\"--method.context_window\", \"{{$.inputs.parameters['context_window']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_options\", \"Then\": [\"--method.validation_options\", \"{{$.inputs.parameters['validation_options']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"budget_milli_node_hours\", \"Then\": [\"--method.budget_milli_node_hours\", \"{{$.inputs.parameters['budget_milli_node_hours']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_display_name\", \"Then\": [\"--method.model_display_name\", \"{{$.inputs.parameters['model_display_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_fraction_split\", \"Then\": [\"--method.training_fraction_split\", \"{{$.inputs.parameters['training_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_fraction_split\", \"Then\": [\"--method.validation_fraction_split\", \"{{$.inputs.parameters['validation_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"test_fraction_split\", \"Then\": [\"--method.test_fraction_split\", \"{{$.inputs.parameters['test_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"predefined_split_column_name\", \"Then\": [\"--method.predefined_split_column_name\", \"{{$.inputs.parameters['predefined_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"timestamp_split_column_name\", \"Then\": [\"--method.timestamp_split_column_name\", \"{{$.inputs.parameters['timestamp_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"weight_column\", \"Then\": [\"--method.weight_column\", \"{{$.inputs.parameters['weight_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items\", \"Then\": [\"--method.export_evaluated_data_items\", \"{{$.inputs.parameters['export_evaluated_data_items']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_bigquery_destination_uri\", \"Then\": [\"--method.export_evaluated_data_items_bigquery_destination_uri\", \"{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_override_destination\", \"Then\": [\"--method.export_evaluated_data_items_override_destination\", \"{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"time_series_attribute_columns\", \"Then\": [\"--method.time_series_attribute_columns\", \"{{$.inputs.parameters['time_series_attribute_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"quantiles\", \"Then\": [\"--method.quantiles\", \"{{$.inputs.parameters['quantiles']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"labels\", \"Then\": [\"--init.labels\", \"{{$.inputs.parameters['labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_labels\", \"Then\": [\"--method.model_labels\", \"{{$.inputs.parameters['model_labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_id\", \"Then\": [\"--method.model_id\", \"{{$.inputs.parameters['model_id']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"parent_model\", \"Then\": [\"--method.parent_model\", \"{{$.inputs.parameters['parent_model']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"is_default_version\", \"Then\": [\"--method.is_default_version\", \"{{$.inputs.parameters['is_default_version']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_aliases\", \"Then\": [\"--method.model_version_aliases\", \"{{$.inputs.parameters['model_version_aliases']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_description\", \"Then\": [\"--method.model_version_description\", \"{{$.inputs.parameters['model_version_description']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_columns\", \"Then\": [\"--method.hierarchy_group_columns\", \"{{$.inputs.parameters['hierarchy_group_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_total_weight\", \"Then\": [\"--method.hierarchy_group_total_weight\", \"{{$.inputs.parameters['hierarchy_group_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_temporal_total_weight\", \"Then\": [\"--method.hierarchy_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_temporal_total_weight\", \"Then\": [\"--method.hierarchy_group_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_group_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_column\", \"Then\": [\"--method.window_column\", \"{{$.inputs.parameters['window_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_stride_length\", \"Then\": [\"--method.window_stride_length\", \"{{$.inputs.parameters['window_stride_length']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_max_count\", \"Then\": [\"--method.window_max_count\", \"{{$.inputs.parameters['window_max_count']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"holiday_regions\", \"Then\": [\"--method.holiday_regions\", \"{{$.inputs.parameters['holiday_regions']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_specs\", \"Then\": [\"--init.column_specs\", \"{{$.inputs.parameters['column_specs']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_transformations\", \"Then\": [\"--init.column_transformations\", \"{{$.inputs.parameters['column_transformations']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"additional_experiments\", \"Then\": [\"--method.additional_experiments\", \"{{$.inputs.parameters['additional_experiments']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['model'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "AutoMLForecastingTrainingJob",
            "--method_name",
            "run"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-automl-forecasting-training-job-3": {
        "container": {
          "args": [
            "--init.project",
            "{{$.inputs.parameters['project']}}",
            "--init.location",
            "{{$.inputs.parameters['location']}}",
            "--init.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "--method.target_column",
            "{{$.inputs.parameters['target_column']}}",
            "--method.time_column",
            "{{$.inputs.parameters['time_column']}}",
            "--method.time_series_identifier_column",
            "{{$.inputs.parameters['time_series_identifier_column']}}",
            "--method.unavailable_at_forecast_columns",
            "{{$.inputs.parameters['unavailable_at_forecast_columns']}}",
            "--method.available_at_forecast_columns",
            "{{$.inputs.parameters['available_at_forecast_columns']}}",
            "--method.forecast_horizon",
            "{{$.inputs.parameters['forecast_horizon']}}",
            "--method.data_granularity_unit",
            "{{$.inputs.parameters['data_granularity_unit']}}",
            "--method.data_granularity_count",
            "{{$.inputs.parameters['data_granularity_count']}}",
            "--method.dataset",
            "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective\", \"Then\": [\"--init.optimization_objective\", \"{{$.inputs.parameters['optimization_objective']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_encryption_spec_key_name\", \"Then\": [\"--init.training_encryption_spec_key_name\", \"{{$.inputs.parameters['training_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_encryption_spec_key_name\", \"Then\": [\"--init.model_encryption_spec_key_name\", \"{{$.inputs.parameters['model_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"context_window\", \"Then\": [\"--method.context_window\", \"{{$.inputs.parameters['context_window']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_options\", \"Then\": [\"--method.validation_options\", \"{{$.inputs.parameters['validation_options']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"budget_milli_node_hours\", \"Then\": [\"--method.budget_milli_node_hours\", \"{{$.inputs.parameters['budget_milli_node_hours']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_display_name\", \"Then\": [\"--method.model_display_name\", \"{{$.inputs.parameters['model_display_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_fraction_split\", \"Then\": [\"--method.training_fraction_split\", \"{{$.inputs.parameters['training_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_fraction_split\", \"Then\": [\"--method.validation_fraction_split\", \"{{$.inputs.parameters['validation_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"test_fraction_split\", \"Then\": [\"--method.test_fraction_split\", \"{{$.inputs.parameters['test_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"predefined_split_column_name\", \"Then\": [\"--method.predefined_split_column_name\", \"{{$.inputs.parameters['predefined_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"timestamp_split_column_name\", \"Then\": [\"--method.timestamp_split_column_name\", \"{{$.inputs.parameters['timestamp_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"weight_column\", \"Then\": [\"--method.weight_column\", \"{{$.inputs.parameters['weight_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items\", \"Then\": [\"--method.export_evaluated_data_items\", \"{{$.inputs.parameters['export_evaluated_data_items']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_bigquery_destination_uri\", \"Then\": [\"--method.export_evaluated_data_items_bigquery_destination_uri\", \"{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_override_destination\", \"Then\": [\"--method.export_evaluated_data_items_override_destination\", \"{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"time_series_attribute_columns\", \"Then\": [\"--method.time_series_attribute_columns\", \"{{$.inputs.parameters['time_series_attribute_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"quantiles\", \"Then\": [\"--method.quantiles\", \"{{$.inputs.parameters['quantiles']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"labels\", \"Then\": [\"--init.labels\", \"{{$.inputs.parameters['labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_labels\", \"Then\": [\"--method.model_labels\", \"{{$.inputs.parameters['model_labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_id\", \"Then\": [\"--method.model_id\", \"{{$.inputs.parameters['model_id']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"parent_model\", \"Then\": [\"--method.parent_model\", \"{{$.inputs.parameters['parent_model']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"is_default_version\", \"Then\": [\"--method.is_default_version\", \"{{$.inputs.parameters['is_default_version']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_aliases\", \"Then\": [\"--method.model_version_aliases\", \"{{$.inputs.parameters['model_version_aliases']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_description\", \"Then\": [\"--method.model_version_description\", \"{{$.inputs.parameters['model_version_description']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_columns\", \"Then\": [\"--method.hierarchy_group_columns\", \"{{$.inputs.parameters['hierarchy_group_columns']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_total_weight\", \"Then\": [\"--method.hierarchy_group_total_weight\", \"{{$.inputs.parameters['hierarchy_group_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_temporal_total_weight\", \"Then\": [\"--method.hierarchy_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"hierarchy_group_temporal_total_weight\", \"Then\": [\"--method.hierarchy_group_temporal_total_weight\", \"{{$.inputs.parameters['hierarchy_group_temporal_total_weight']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_column\", \"Then\": [\"--method.window_column\", \"{{$.inputs.parameters['window_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_stride_length\", \"Then\": [\"--method.window_stride_length\", \"{{$.inputs.parameters['window_stride_length']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"window_max_count\", \"Then\": [\"--method.window_max_count\", \"{{$.inputs.parameters['window_max_count']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"holiday_regions\", \"Then\": [\"--method.holiday_regions\", \"{{$.inputs.parameters['holiday_regions']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_specs\", \"Then\": [\"--init.column_specs\", \"{{$.inputs.parameters['column_specs']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_transformations\", \"Then\": [\"--init.column_transformations\", \"{{$.inputs.parameters['column_transformations']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"additional_experiments\", \"Then\": [\"--method.additional_experiments\", \"{{$.inputs.parameters['additional_experiments']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['model'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "AutoMLForecastingTrainingJob",
            "--method_name",
            "run"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-bigquery-create-model-job": {
        "container": {
          "args": [
            "--type",
            "BigqueryCreateModelJob",
            "--project",
            "{{$.inputs.parameters['project']}}",
            "--location",
            "{{$.inputs.parameters['location']}}",
            "--payload",
            "{\"Concat\": [\"{\", \"\\\"configuration\\\": {\", \"\\\"query\\\": \", \"{{$.inputs.parameters['job_configuration_query']}}\", \", \\\"labels\\\": \", \"{{$.inputs.parameters['labels']}}\", \"}\", \"}\"]}",
            "--job_configuration_query_override",
            "{\"Concat\": [\"{\", \"\\\"query\\\": \\\"\", \"{{$.inputs.parameters['query']}}\", \"\\\"\", \", \\\"query_parameters\\\": \", \"{{$.inputs.parameters['query_parameters']}}\", \"}\"]}",
            "--gcp_resources",
            "{{$.outputs.parameters['gcp_resources'].output_file}}",
            "--executor_input",
            "{{$}}"
          ],
          "command": [
            "python3",
            "-u",
            "-m",
            "google_cloud_pipeline_components.container.v1.bigquery.create_model.launcher"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-create-partitioned-forecast-table": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "create_partitioned_forecast_table"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef create_partitioned_forecast_table(\n    source_table: str,\n    target_table: str,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> None:\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n\n    query = f\"\"\"CREATE OR REPLACE TABLE `{target_table}`  \n                PARTITION BY date\n                as\n                (\n               SELECT CAST(date AS DATE) as date,\n               CAST(predicted_on_date AS DATE) as predicted_on_date,\n               predicted_score,\n               score,\n               CAST(topic_id as INT64) as topic_id\n               from `{source_table}`)\n               \"\"\"\n    bq_client.query(query).result()\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-create-prediction-dataset-term-level": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "create_prediction_dataset_term_level"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef create_prediction_dataset_term_level(\n    target_table: str,\n    source_table_uri: str,\n    train_st: str,\n    train_end: str,\n    valid_st: str,\n    valid_end: str,\n    subcat_id: int,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"training_data_table_uri\", str)]):\n    \"\"\"This component takes in a source table and creates a new table with the following columns:\n    date, geo_id, term, score, split_col (TRAIN, VALIDATE, TEST)\n    \"\"\"\n\n    from google.cloud import bigquery\n\n    override = bool(override)\n    bq_client = bigquery.Client(project=project_id)\n    (\n        bq_client.query(\n            f\"\"\"CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n          RETURNS \n          STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n          AS (\n          STRUCT(\n              arr[OFFSET(0)]\n              , arr[OFFSET(1)]\n              , arr[OFFSET(2)]\n              , arr[OFFSET(3)]\n              , arr[OFFSET(4)]\n              , arr[OFFSET(5)]\n              , arr[OFFSET(6)]\n              , arr[OFFSET(7)]\n              , arr[OFFSET(8)]\n              , arr[OFFSET(9)]\n              , arr[OFFSET(10)]\n              , arr[OFFSET(11)]\n              , arr[OFFSET(12)]\n              , arr[OFFSET(13)]\n              , arr[OFFSET(14)]\n              , arr[OFFSET(15)]\n              , arr[OFFSET(16)]\n              , arr[OFFSET(17)]\n              , arr[OFFSET(18)]\n              , arr[OFFSET(19)]    \n          ));\n\n\n          CREATE OR REPLACE TABLE `{target_table}` as (\n              SELECT * except(output_0), case when date between \"{train_st}\" and \"{train_end}\" then 'TRAIN'\n                    when date between \"{valid_st}\" and \"{valid_end}\" then 'VALIDATE'\n                  else 'TEST' end as split_col,\n              arr_to_input_20(output_0) as embed\n          FROM ML.PREDICT(MODEL trendspotting.swivel_text_embed,\n          (\n            SELECT date, geo_id, term AS sentences, concat(term, geo_id) as series_id,  SUM(score) * 10000 as score\n            FROM `{source_table_uri}` where category_id = {subcat_id} and date > \"{train_st}\"\n          GROUP BY 1, 2, 3, 4))      \n          )\n            \"\"\"\n        ).result()\n    )\n\n    return (f\"{target_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-create-top-mover-table": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "create_top_mover_table"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef create_top_mover_table(\n    source_table: str,\n    target_table: str,\n    predict_on_dt: str,  # uses the last validation date,\n    six_month_dt: str,\n    trained_model: Input[Artifact],\n    top_n_results: int,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"term_train_table\", str)]):\n\n    from google.cloud import bigquery\n\n    source_table_no_bq = source_table.strip(\"bq://\")\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n        bq_client.query(\n            f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n    select * from\n      (with six_mo_val as (select *, predicted_score.value as six_mo_forecast from `{source_table_no_bq}` \n        where predicted_on_date = '{predict_on_dt}' and date = '{six_month_dt}')\n       SELECT \n       cast(a.date AS DATE) as date,\n       cast(b.date AS DATE) as future_date,\n       a.geo_id, \n       TRIM(a.series_id, a.geo_id) as sentences, \n       a.score as current_rank, \n       a.score - b.six_mo_forecast as six_delta_rank,\n       b.score as six_mo_rank, \n       six_mo_forecast\n      FROM `{source_table_no_bq}` a INNER JOIN \n       six_mo_val b on a.series_id = b.series_id \n      WHERE a.date = '{predict_on_dt}' and a.predicted_on_date = '{predict_on_dt}'\n      ) where  current_rank < six_mo_rank order by six_delta_rank desc limit {top_n_results} \n)\n          \"\"\"\n        ).result()\n    )\n\n    return (f\"{target_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-if-tbl-exists": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "if_tbl_exists"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef if_tbl_exists(table_ref: str, project_id: str) -> str:\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project_id)\n    from google.cloud.exceptions import NotFound\n\n    try:\n        bq_client.get_table(table_ref)\n        return \"True\"\n    except NotFound:\n        return \"False\"\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-nlp-featurize-and-cluster": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "nlp_featurize_and_cluster"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef nlp_featurize_and_cluster(\n    source_table: str,\n    target_table: str,\n    train_st: str,\n    train_end: str,\n    subcat_id: int,\n    model_name: str,\n    n_clusters: int,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"term_cluster_table\", str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n        bq_client.query(\n            f\"\"\"\n            CREATE TEMPORARY FUNCTION arr_to_input_20(arr ARRAY<FLOAT64>)\n            RETURNS \n            STRUCT<p1 FLOAT64, p2 FLOAT64, p3 FLOAT64, p4 FLOAT64,\n                   p5 FLOAT64, p6 FLOAT64, p7 FLOAT64, p8 FLOAT64, \n                   p9 FLOAT64, p10 FLOAT64, p11 FLOAT64, p12 FLOAT64, \n                   p13 FLOAT64, p14 FLOAT64, p15 FLOAT64, p16 FLOAT64,\n                   p17 FLOAT64, p18 FLOAT64, p19 FLOAT64, p20 FLOAT64>\n            AS (\n            STRUCT(\n                arr[OFFSET(0)]\n                , arr[OFFSET(1)]\n                , arr[OFFSET(2)]\n                , arr[OFFSET(3)]\n                , arr[OFFSET(4)]\n                , arr[OFFSET(5)]\n                , arr[OFFSET(6)]\n                , arr[OFFSET(7)]\n                , arr[OFFSET(8)]\n                , arr[OFFSET(9)]\n                , arr[OFFSET(10)]\n                , arr[OFFSET(11)]\n                , arr[OFFSET(12)]\n                , arr[OFFSET(13)]\n                , arr[OFFSET(14)]\n                , arr[OFFSET(15)]\n                , arr[OFFSET(16)]\n                , arr[OFFSET(17)]\n                , arr[OFFSET(18)]\n                , arr[OFFSET(19)]    \n            ));\n\n            CREATE OR REPLACE TABLE `{target_table}` \n            PARTITION BY RANGE_BUCKET(TOPIC_ID, GENERATE_ARRAY(0, {n_clusters}+1, 1)) \n            as ( \n                select * except(CENTROID_ID), CENTROID_ID as TOPIC_ID\n                from ML.PREDICT(MODEL `{model_name}`, (\n                    select *, arr_to_input_20(output_0) AS comments_embed from \n                        ML.PREDICT(MODEL trendspotting.swivel_text_embed,(\n                      SELECT cast(date AS DATE) as date, geo_name, term AS sentences, score\n                      FROM `{source_table}`\n                      WHERE date >= '{train_st}'\n                      and category_id = {subcat_id}\n                    ))\n                    )\n                )\n            )\n          \"\"\"\n        ).result()\n    )\n\n    return (f\"{target_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-prep-forecast-term-level": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "prep_forecast_term_level"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef prep_forecast_term_level(\n    source_table: str,\n    target_table: str,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"term_train_table\", str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    source_table_no_bq = source_table.strip(\"bq://\")\n    (\n        bq_client.query(\n            f\"\"\"\n            CREATE OR REPLACE TABLE `{target_table}` as (\n        SELECT * except(embed), \n        embed.p1 as emb1, \n        embed.p2 as emb2,\n        embed.p3 as emb3,\n        embed.p4 as emb4,\n        embed.p5 as emb5,\n        embed.p6 as emb6,\n        embed.p7 as emb7,\n        embed.p8 as emb8,\n        embed.p9 as emb9,\n        embed.p10 as emb10,\n        embed.p11 as emb11,\n        embed.p12 as emb12,\n        embed.p13 as emb13,\n        embed.p14 as emb14,\n        embed.p15 as emb15,\n        embed.p16 as emb16,\n        embed.p17 as emb17,\n        embed.p18 as emb18,\n        embed.p19 as emb19,\n        embed.p20 as emb20\n\n        FROM `{source_table_no_bq}` )\n          \"\"\"\n        ).result()\n    )\n\n    return (f\"bq://{target_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-sustained-riser-report": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "sustained_riser_report"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef sustained_riser_report(\n    source_table: str,\n    target_table: str,\n    top_n: int,\n    predicted_on_dt: str,\n    override: str = \"False\",\n    project_id: str = \"cpg-cdp\",\n) -> NamedTuple(\"Outputs\", [(\"top_riser_table\", str)]):\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project=project_id)\n    (\n        bq_client.query(\n            f\"\"\"\n            CREATE OR REPLACE TABLE {target_table} as (\n            WITH\n              forecasted_difference_table AS (\n              SELECT\n                series_id,\n                date,\n                predicted_score.value AS forecasted_score,\n                score,\n                LAG(predicted_score.value) OVER (PARTITION BY series_id ORDER BY date) - predicted_score.value AS forecasted_difference\n              FROM\n                `{source_table}`\n              WHERE\n                predicted_on_date = '{predicted_on_dt}'\n              ORDER BY\n                series_id,\n                date ASC)\n            SELECT\n              b.*\n            FROM (\n              SELECT\n                series_id,\n                AVG(forecasted_difference) AS avg_rise\n              FROM\n                forecasted_difference_table\n              GROUP BY\n                series_id  ORDER BY\n              2 DESC\n            LIMIT\n              {top_n}) a, `{source_table}` b WHERE b.predicted_on_date = '{predicted_on_dt}' and a.series_id = b.series_id\n\n            )\n          \"\"\"\n        ).result()\n    )\n\n    return (f\"{target_table}\",)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-time-series-dataset-create": {
        "container": {
          "args": [
            "--method.project",
            "{{$.inputs.parameters['project']}}",
            "--method.location",
            "{{$.inputs.parameters['location']}}",
            "--method.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "{\"IfPresent\": {\"InputName\": \"gcs_source\", \"Then\": [\"--method.gcs_source\", \"{{$.inputs.parameters['gcs_source']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"bq_source\", \"Then\": [\"--method.bq_source\", \"{{$.inputs.parameters['bq_source']}}\"]}}",
            "--method.labels",
            "{{$.inputs.parameters['labels']}}",
            "{\"IfPresent\": {\"InputName\": \"encryption_spec_key_name\", \"Then\": [\"--method.encryption_spec_key_name\", \"{{$.inputs.parameters['encryption_spec_key_name']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['dataset'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "TimeSeriesDataset",
            "--method_name",
            "create"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-time-series-dataset-create-2": {
        "container": {
          "args": [
            "--method.project",
            "{{$.inputs.parameters['project']}}",
            "--method.location",
            "{{$.inputs.parameters['location']}}",
            "--method.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "{\"IfPresent\": {\"InputName\": \"gcs_source\", \"Then\": [\"--method.gcs_source\", \"{{$.inputs.parameters['gcs_source']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"bq_source\", \"Then\": [\"--method.bq_source\", \"{{$.inputs.parameters['bq_source']}}\"]}}",
            "--method.labels",
            "{{$.inputs.parameters['labels']}}",
            "{\"IfPresent\": {\"InputName\": \"encryption_spec_key_name\", \"Then\": [\"--method.encryption_spec_key_name\", \"{{$.inputs.parameters['encryption_spec_key_name']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['dataset'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "TimeSeriesDataset",
            "--method_name",
            "create"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-time-series-dataset-create-3": {
        "container": {
          "args": [
            "--method.project",
            "{{$.inputs.parameters['project']}}",
            "--method.location",
            "{{$.inputs.parameters['location']}}",
            "--method.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "{\"IfPresent\": {\"InputName\": \"gcs_source\", \"Then\": [\"--method.gcs_source\", \"{{$.inputs.parameters['gcs_source']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"bq_source\", \"Then\": [\"--method.bq_source\", \"{{$.inputs.parameters['bq_source']}}\"]}}",
            "--method.labels",
            "{{$.inputs.parameters['labels']}}",
            "{\"IfPresent\": {\"InputName\": \"encryption_spec_key_name\", \"Then\": [\"--method.encryption_spec_key_name\", \"{{$.inputs.parameters['encryption_spec_key_name']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['dataset'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.v1.aiplatform.remote_runner",
            "--cls_name",
            "TimeSeriesDataset",
            "--method_name",
            "create"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:2.9.0"
        }
      },
      "exec-train-classification-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_classification_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-bigquery==2.18.0' 'pytz' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_classification_model(\n    target_table: str,\n    source_table: str,\n    label_table: str,\n    train_table: str,\n    classification_model_name: str,\n    classification_budget_hours: int,\n    project_id: str = \"cpg-cdp\",\n) -> str:\n\n    from google.cloud import bigquery\n\n    bq_client = bigquery.Client(project_id)\n\n    source_table_no_bq = source_table.strip(\"bq://\")\n\n    sql = f\"\"\" CREATE OR REPLACE TABLE\n      {train_table} AS (\n      with distinct_data as (\n      SELECT DISTINCT\n        * EXCEPT(category_rank, series_id, date)\n      FROM\n        `{source_table_no_bq}` a\n      INNER JOIN\n        `{label_table}` b\n      ON\n        a.sentences = b.terms )\n      select distinct *,\n      case when rand() > 0.9 then 'VALIDATE' when rand() > 0.8 then 'TEST' else 'TRAIN' end as dataframe\n      from distinct_data \n      WHERE label is not null\n        )\n    \"\"\"\n\n    bq_client.query(sql).result()\n    print(\"Training dataset for classification complete\")\n\n    model_sql = f\"\"\"CREATE OR REPLACE MODEL\n      {classification_model_name}\n    OPTIONS\n      ( model_type='AUTOML_CLASSIFIER',\n        BUDGET_HOURS={classification_budget_hours},\n        input_label_cols=['label']\n      ) AS\n    SELECT\n      * EXCEPT(dataframe, count)\n    FROM\n     `{train_table}`\n    WHERE\n      dataframe = 'TRAIN'\"\"\"\n\n    bq_client.query(model_sql).result()\n\n    print(\"Training for classification complete\")\n    score_table_sql = f\"\"\"CREATE OR REPLACE TABLE {target_table} as (\n    SELECT\n      *\n    FROM\n      ML.PREDICT (MODEL {classification_model_name},\n        (\n        SELECT\n          *,\n            sentences as terms\n        FROM\n           `{source_table_no_bq}`\n         )\n      )\n    )\"\"\"\n\n    bq_client.query(score_table_sql).result()\n    print(\"Scoring for classification complete\")\n\n    return target_table\n\n"
          ],
          "image": "python:3.9"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "cuisines-10889-thailand-2764-trendspotting-pipeline-v7-1"
  },
  "root": {
    "dag": {
      "tasks": {
        "alter-topmover-schema": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-alter-topmover-schema"
          },
          "dependentTasks": [
            "create-top-mover-table"
          ],
          "inputs": {
            "parameters": {
              "source_table": {
                "componentInputParameter": "top_movers_target_table"
              }
            }
          },
          "taskInfo": {
            "name": "Adding descriptions to the output table"
          }
        },
        "automl-forecasting-training-job": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-automl-forecasting-training-job"
          },
          "dependentTasks": [
            "time-series-dataset-create"
          ],
          "inputs": {
            "artifacts": {
              "dataset": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset",
                  "producerTask": "time-series-dataset-create"
                }
              }
            },
            "parameters": {
              "available_at_forecast_columns": {
                "runtimeValue": {
                  "constant": [
                    "date"
                  ]
                }
              },
              "budget_milli_node_hours": {
                "componentInputParameter": "budget_milli_node_hours"
              },
              "column_specs": {
                "runtimeValue": {
                  "constant": {
                    "date": "timestamp",
                    "emb1": "numeric",
                    "emb10": "numeric",
                    "emb11": "numeric",
                    "emb12": "numeric",
                    "emb13": "numeric",
                    "emb14": "numeric",
                    "emb15": "numeric",
                    "emb16": "numeric",
                    "emb17": "numeric",
                    "emb18": "numeric",
                    "emb19": "numeric",
                    "emb2": "numeric",
                    "emb20": "numeric",
                    "emb3": "numeric",
                    "emb4": "numeric",
                    "emb5": "numeric",
                    "emb6": "numeric",
                    "emb7": "numeric",
                    "emb8": "numeric",
                    "emb9": "numeric",
                    "geo_id": "categorical",
                    "score": "numeric",
                    "sentences": "categorical"
                  }
                }
              },
              "context_window": {
                "componentInputParameter": "context_window"
              },
              "data_granularity_count": {
                "runtimeValue": {
                  "constant": 1.0
                }
              },
              "data_granularity_unit": {
                "runtimeValue": {
                  "constant": "week"
                }
              },
              "display_name": {
                "runtimeValue": {
                  "constant": "train-point-forecast-futurama"
                }
              },
              "export_evaluated_data_items": {
                "runtimeValue": {
                  "constant": true
                }
              },
              "export_evaluated_data_items_bigquery_destination_uri": {
                "componentInputParameter": "target_term_forecast_table"
              },
              "export_evaluated_data_items_override_destination": {
                "runtimeValue": {
                  "constant": true
                }
              },
              "forecast_horizon": {
                "componentInputParameter": "forecast_horizon"
              },
              "location": {
                "componentInputParameter": "location"
              },
              "model_display_name": {
                "runtimeValue": {
                  "constant": "point-forecast-futurama"
                }
              },
              "optimization_objective": {
                "runtimeValue": {
                  "constant": "minimize-rmse"
                }
              },
              "predefined_split_column_name": {
                "runtimeValue": {
                  "constant": "split_col"
                }
              },
              "project": {
                "componentInputParameter": "vertex_project"
              },
              "target_column": {
                "runtimeValue": {
                  "constant": "score"
                }
              },
              "time_column": {
                "runtimeValue": {
                  "constant": "date"
                }
              },
              "time_series_attribute_columns": {
                "runtimeValue": {
                  "constant": [
                    "sentences",
                    "geo_id",
                    "emb1",
                    "emb2",
                    "emb3",
                    "emb4",
                    "emb5",
                    "emb6",
                    "emb7",
                    "emb8",
                    "emb9",
                    "emb10",
                    "emb11",
                    "emb12",
                    "emb13",
                    "emb14",
                    "emb15",
                    "emb16",
                    "emb17",
                    "emb18",
                    "emb19",
                    "emb20"
                  ]
                }
              },
              "time_series_identifier_column": {
                "runtimeValue": {
                  "constant": "series_id"
                }
              },
              "unavailable_at_forecast_columns": {
                "runtimeValue": {
                  "constant": [
                    "score"
                  ]
                }
              }
            }
          },
          "taskInfo": {
            "name": "Forecast term-level"
          }
        },
        "condition-1": {
          "componentRef": {
            "name": "comp-condition-1"
          },
          "dependentTasks": [
            "if-tbl-exists",
            "prep-forecast-term-level"
          ],
          "inputs": {
            "parameters": {
              "pipelinechannel--auto_cluster_target_table": {
                "componentInputParameter": "auto_cluster_target_table"
              },
              "pipelinechannel--auto_cluster_train_table": {
                "componentInputParameter": "auto_cluster_train_table"
              },
              "pipelinechannel--auto_max_cluster": {
                "componentInputParameter": "auto_max_cluster"
              },
              "pipelinechannel--auto_min_cluster": {
                "componentInputParameter": "auto_min_cluster"
              },
              "pipelinechannel--budget_milli_node_hours_cluster": {
                "componentInputParameter": "budget_milli_node_hours_cluster"
              },
              "pipelinechannel--classification_model_budget": {
                "componentInputParameter": "classification_model_budget"
              },
              "pipelinechannel--classification_model_name": {
                "componentInputParameter": "classification_model_name"
              },
              "pipelinechannel--classification_train_table": {
                "componentInputParameter": "classification_train_table"
              },
              "pipelinechannel--cluster_table": {
                "componentInputParameter": "cluster_table"
              },
              "pipelinechannel--cluster_table_agg": {
                "componentInputParameter": "cluster_table_agg"
              },
              "pipelinechannel--context_window": {
                "componentInputParameter": "context_window"
              },
              "pipelinechannel--ds_display_name_cluster": {
                "componentInputParameter": "ds_display_name_cluster"
              },
              "pipelinechannel--forecast_horizon": {
                "componentInputParameter": "forecast_horizon"
              },
              "pipelinechannel--if-tbl-exists-Output": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "if-tbl-exists"
                }
              },
              "pipelinechannel--label_list": {
                "componentInputParameter": "label_list"
              },
              "pipelinechannel--label_table": {
                "componentInputParameter": "label_table"
              },
              "pipelinechannel--location": {
                "componentInputParameter": "location"
              },
              "pipelinechannel--model_name": {
                "componentInputParameter": "model_name"
              },
              "pipelinechannel--prep-forecast-term-level-term_train_table": {
                "taskOutputParameter": {
                  "outputParameterKey": "term_train_table",
                  "producerTask": "prep-forecast-term-level"
                }
              },
              "pipelinechannel--scored_classification_table": {
                "componentInputParameter": "scored_classification_table"
              },
              "pipelinechannel--target_cluster_forecast_table": {
                "componentInputParameter": "target_cluster_forecast_table"
              },
              "pipelinechannel--train_end": {
                "componentInputParameter": "train_end"
              },
              "pipelinechannel--train_st": {
                "componentInputParameter": "train_st"
              },
              "pipelinechannel--valid_end": {
                "componentInputParameter": "valid_end"
              },
              "pipelinechannel--valid_st": {
                "componentInputParameter": "valid_st"
              },
              "pipelinechannel--vertex_project": {
                "componentInputParameter": "vertex_project"
              }
            }
          },
          "taskInfo": {
            "name": "condition-1"
          },
          "triggerPolicy": {
            "condition": "inputs.parameter_values['pipelinechannel--if-tbl-exists-Output'] == 'True'"
          }
        },
        "condition-2": {
          "componentRef": {
            "name": "comp-condition-2"
          },
          "dependentTasks": [
            "if-tbl-exists"
          ],
          "inputs": {
            "parameters": {
              "pipelinechannel--budget_milli_node_hours_cluster": {
                "componentInputParameter": "budget_milli_node_hours_cluster"
              },
              "pipelinechannel--cluster_table": {
                "componentInputParameter": "cluster_table"
              },
              "pipelinechannel--cluster_table_agg_basic": {
                "componentInputParameter": "cluster_table_agg_basic"
              },
              "pipelinechannel--context_window": {
                "componentInputParameter": "context_window"
              },
              "pipelinechannel--ds_display_name_cluster": {
                "componentInputParameter": "ds_display_name_cluster"
              },
              "pipelinechannel--forecast_horizon": {
                "componentInputParameter": "forecast_horizon"
              },
              "pipelinechannel--if-tbl-exists-Output": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "if-tbl-exists"
                }
              },
              "pipelinechannel--location": {
                "componentInputParameter": "location"
              },
              "pipelinechannel--model_name": {
                "componentInputParameter": "model_name"
              },
              "pipelinechannel--n_clusters": {
                "componentInputParameter": "n_clusters"
              },
              "pipelinechannel--source_table": {
                "componentInputParameter": "source_table"
              },
              "pipelinechannel--subcat_id": {
                "componentInputParameter": "subcat_id"
              },
              "pipelinechannel--target_cluster_forecast_table_basic": {
                "componentInputParameter": "target_cluster_forecast_table_basic"
              },
              "pipelinechannel--target_cluster_forecast_table_basic_partitioned": {
                "componentInputParameter": "target_cluster_forecast_table_basic_partitioned"
              },
              "pipelinechannel--train_end": {
                "componentInputParameter": "train_end"
              },
              "pipelinechannel--train_st": {
                "componentInputParameter": "train_st"
              },
              "pipelinechannel--valid_end": {
                "componentInputParameter": "valid_end"
              },
              "pipelinechannel--valid_st": {
                "componentInputParameter": "valid_st"
              },
              "pipelinechannel--vertex_project": {
                "componentInputParameter": "vertex_project"
              }
            }
          },
          "taskInfo": {
            "name": "condition-2"
          },
          "triggerPolicy": {
            "condition": "inputs.parameter_values['pipelinechannel--if-tbl-exists-Output'] == 'False'"
          }
        },
        "create-prediction-dataset-term-level": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-create-prediction-dataset-term-level"
          },
          "inputs": {
            "parameters": {
              "pipelinechannel--vertex_project": {
                "componentInputParameter": "vertex_project"
              },
              "source_table_uri": {
                "componentInputParameter": "source_table"
              },
              "subcat_id": {
                "componentInputParameter": "subcat_id"
              },
              "target_table": {
                "runtimeValue": {
                  "constant": "{{$.inputs.parameters['pipelinechannel--vertex_project']}}.trends_pipeline.cuisines_10889_thailand_2764_ETL_futurama_weekly_embed_v7_1"
                }
              },
              "train_end": {
                "componentInputParameter": "train_end"
              },
              "train_st": {
                "componentInputParameter": "train_st"
              },
              "valid_end": {
                "componentInputParameter": "valid_end"
              },
              "valid_st": {
                "componentInputParameter": "valid_st"
              }
            }
          },
          "taskInfo": {
            "name": "Add embeddings and split data"
          }
        },
        "create-top-mover-table": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-create-top-mover-table"
          },
          "dependentTasks": [
            "automl-forecasting-training-job"
          ],
          "inputs": {
            "artifacts": {
              "trained_model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model",
                  "producerTask": "automl-forecasting-training-job"
                }
              }
            },
            "parameters": {
              "predict_on_dt": {
                "componentInputParameter": "predict_on_dt"
              },
              "six_month_dt": {
                "componentInputParameter": "six_month_dt"
              },
              "source_table": {
                "componentInputParameter": "target_term_forecast_table"
              },
              "target_table": {
                "componentInputParameter": "top_movers_target_table"
              },
              "top_n_results": {
                "componentInputParameter": "top_n_results"
              }
            }
          },
          "taskInfo": {
            "name": "Generate the top mover table"
          }
        },
        "if-tbl-exists": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-if-tbl-exists"
          },
          "inputs": {
            "parameters": {
              "project_id": {
                "componentInputParameter": "vertex_project"
              },
              "table_ref": {
                "componentInputParameter": "label_table"
              }
            }
          },
          "taskInfo": {
            "name": "if-tbl-exists"
          }
        },
        "prep-forecast-term-level": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-prep-forecast-term-level"
          },
          "dependentTasks": [
            "create-prediction-dataset-term-level"
          ],
          "inputs": {
            "parameters": {
              "source_table": {
                "taskOutputParameter": {
                  "outputParameterKey": "training_data_table_uri",
                  "producerTask": "create-prediction-dataset-term-level"
                }
              },
              "target_table": {
                "componentInputParameter": "fix_embed_target"
              }
            }
          },
          "taskInfo": {
            "name": "Prep Data For Training"
          }
        },
        "sustained-riser-report": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-sustained-riser-report"
          },
          "dependentTasks": [
            "automl-forecasting-training-job"
          ],
          "inputs": {
            "parameters": {
              "predicted_on_dt": {
                "componentInputParameter": "predict_on_dt"
              },
              "source_table": {
                "componentInputParameter": "target_term_forecast_table"
              },
              "target_table": {
                "componentInputParameter": "sustained_riser_table"
              },
              "top_n": {
                "componentInputParameter": "top_n_results"
              }
            }
          },
          "taskInfo": {
            "name": "Create Sustained Riser Table"
          }
        },
        "time-series-dataset-create": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-time-series-dataset-create"
          },
          "dependentTasks": [
            "prep-forecast-term-level"
          ],
          "inputs": {
            "parameters": {
              "bq_source": {
                "taskOutputParameter": {
                  "outputParameterKey": "term_train_table",
                  "producerTask": "prep-forecast-term-level"
                }
              },
              "display_name": {
                "componentInputParameter": "ds_display_name_terms"
              },
              "location": {
                "componentInputParameter": "location"
              },
              "project": {
                "componentInputParameter": "vertex_project"
              }
            }
          },
          "taskInfo": {
            "name": "Prep data for training"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "auto_cluster_target_table": {
          "parameterType": "STRING"
        },
        "auto_cluster_train_table": {
          "parameterType": "STRING"
        },
        "auto_max_cluster": {
          "parameterType": "NUMBER_INTEGER"
        },
        "auto_min_cluster": {
          "parameterType": "NUMBER_INTEGER"
        },
        "budget_milli_node_hours": {
          "parameterType": "NUMBER_INTEGER"
        },
        "budget_milli_node_hours_cluster": {
          "parameterType": "NUMBER_INTEGER"
        },
        "classification_model_budget": {
          "parameterType": "NUMBER_INTEGER"
        },
        "classification_model_name": {
          "parameterType": "STRING"
        },
        "classification_train_table": {
          "parameterType": "STRING"
        },
        "cluster_table": {
          "parameterType": "STRING"
        },
        "cluster_table_agg": {
          "parameterType": "STRING"
        },
        "cluster_table_agg_basic": {
          "parameterType": "STRING"
        },
        "context_window": {
          "parameterType": "NUMBER_INTEGER"
        },
        "drop_embed_target": {
          "parameterType": "STRING"
        },
        "ds_display_name_cluster": {
          "parameterType": "STRING"
        },
        "ds_display_name_terms": {
          "parameterType": "STRING"
        },
        "fix_embed_target": {
          "parameterType": "STRING"
        },
        "forecast_horizon": {
          "parameterType": "NUMBER_INTEGER"
        },
        "k_means_name": {
          "parameterType": "STRING"
        },
        "label_list": {
          "parameterType": "LIST"
        },
        "label_table": {
          "parameterType": "STRING"
        },
        "location": {
          "parameterType": "STRING"
        },
        "model_name": {
          "parameterType": "STRING"
        },
        "n_clusters": {
          "parameterType": "NUMBER_INTEGER"
        },
        "override": {
          "parameterType": "STRING"
        },
        "predict_on_dt": {
          "parameterType": "STRING"
        },
        "scored_classification_table": {
          "parameterType": "STRING"
        },
        "six_month_dt": {
          "parameterType": "STRING"
        },
        "source_table": {
          "parameterType": "STRING"
        },
        "subcat_id": {
          "parameterType": "NUMBER_INTEGER"
        },
        "sustained_riser_table": {
          "parameterType": "STRING"
        },
        "target_cluster_forecast_table": {
          "parameterType": "STRING"
        },
        "target_cluster_forecast_table_basic": {
          "parameterType": "STRING"
        },
        "target_cluster_forecast_table_basic_partitioned": {
          "parameterType": "STRING"
        },
        "target_term_forecast_table": {
          "parameterType": "STRING"
        },
        "top_movers_target_table": {
          "parameterType": "STRING"
        },
        "top_n_results": {
          "parameterType": "NUMBER_INTEGER"
        },
        "train_end": {
          "parameterType": "STRING"
        },
        "train_st": {
          "parameterType": "STRING"
        },
        "valid_end": {
          "parameterType": "STRING"
        },
        "valid_st": {
          "parameterType": "STRING"
        },
        "version": {
          "parameterType": "STRING"
        },
        "vertex_project": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.6.0"
}